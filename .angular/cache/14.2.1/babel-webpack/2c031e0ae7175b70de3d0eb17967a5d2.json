{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nclass XOutletDirective {\n  constructor(viewContainer, templateRef) {\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n  }\n\n  ngOnChanges(changes) {\n    const shouldRecreateView = ctxChanges => {\n      const {\n        xOutletContext,\n        xOutlet\n      } = ctxChanges;\n      let shouldOutletRecreate = false;\n\n      if (xOutlet) {\n        if (xOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutlet = xOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutlet = xOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutlet || isCurrentOutlet;\n        }\n      }\n\n      const hasContextShapeChanged = ctxChange => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n\n          return false;\n        } else {\n          return true;\n        }\n      };\n\n      const shouldContextRecreate = xOutletContext && hasContextShapeChanged(xOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n\n    const recreateView = shouldRecreateView(changes);\n\n    if (recreateView) {\n      this.recreateView();\n    } else {\n      this.updateContext();\n    }\n  }\n\n  recreateView() {\n    this.viewContainer.clear();\n    const isTemplateRef = this.xOutlet instanceof TemplateRef;\n    const templateRef = isTemplateRef ? this.xOutlet : this.templateRef;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, this.xOutletContext);\n  }\n\n  updateContext() {\n    const newCtx = this.xOutletContext;\n    const oldCtx = this.embeddedViewRef.context;\n\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n\n}\n/** @nocollapse */\n\n\nXOutletDirective.ɵfac = function XOutletDirective_Factory(t) {\n  return new (t || XOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n/** @nocollapse */\n\n\nXOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XOutletDirective,\n  selectors: [[\"\", \"xOutlet\", \"\"]],\n  inputs: {\n    xOutletContext: \"xOutletContext\",\n    xOutlet: \"xOutlet\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[xOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.TemplateRef\n    }];\n  }, {\n    xOutletContext: [{\n      type: Input\n    }],\n    xOutlet: [{\n      type: Input\n    }]\n  });\n})();\n\nclass XOutletModule {}\n/** @nocollapse */\n\n\nXOutletModule.ɵfac = function XOutletModule_Factory(t) {\n  return new (t || XOutletModule)();\n};\n/** @nocollapse */\n\n\nXOutletModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: XOutletModule\n});\n/** @nocollapse */\n\nXOutletModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XOutletModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [XOutletDirective],\n      exports: [XOutletDirective],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/**\r\n * Outlet 指令名称\r\n * @selector x-outlet\r\n * @decorator Directive\r\n */\n\n\nconst XOutletPrefix = 'x-outlet';\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { XOutletDirective, XOutletModule, XOutletPrefix };","map":{"version":3,"names":["i0","TemplateRef","Directive","Input","NgModule","CommonModule","XOutletDirective","constructor","viewContainer","templateRef","ngOnChanges","changes","shouldRecreateView","ctxChanges","xOutletContext","xOutlet","shouldOutletRecreate","firstChange","isPreviousOutlet","previousValue","isCurrentOutlet","currentValue","hasContextShapeChanged","ctxChange","prevCtxKeys","Object","keys","currCtxKeys","length","propName","indexOf","shouldContextRecreate","recreateView","updateContext","clear","isTemplateRef","embeddedViewRef","createEmbeddedView","newCtx","oldCtx","context","ɵfac","ViewContainerRef","ɵdir","type","args","selector","XOutletModule","ɵmod","ɵinj","declarations","exports","imports","XOutletPrefix"],"sources":["/Users/lzl/my-angular-app/node_modules/@ng-nest/ui/fesm2020/ng-nest-ui-outlet.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nclass XOutletDirective {\r\n    constructor(viewContainer, templateRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.templateRef = templateRef;\r\n    }\r\n    ngOnChanges(changes) {\r\n        const shouldRecreateView = (ctxChanges) => {\r\n            const { xOutletContext, xOutlet } = ctxChanges;\r\n            let shouldOutletRecreate = false;\r\n            if (xOutlet) {\r\n                if (xOutlet.firstChange) {\r\n                    shouldOutletRecreate = true;\r\n                }\r\n                else {\r\n                    const isPreviousOutlet = xOutlet.previousValue instanceof TemplateRef;\r\n                    const isCurrentOutlet = xOutlet.currentValue instanceof TemplateRef;\r\n                    shouldOutletRecreate = isPreviousOutlet || isCurrentOutlet;\r\n                }\r\n            }\r\n            const hasContextShapeChanged = (ctxChange) => {\r\n                const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\r\n                const currCtxKeys = Object.keys(ctxChange.currentValue || {});\r\n                if (prevCtxKeys.length === currCtxKeys.length) {\r\n                    for (const propName of currCtxKeys) {\r\n                        if (prevCtxKeys.indexOf(propName) === -1) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            };\r\n            const shouldContextRecreate = xOutletContext && hasContextShapeChanged(xOutletContext);\r\n            return shouldContextRecreate || shouldOutletRecreate;\r\n        };\r\n        const recreateView = shouldRecreateView(changes);\r\n        if (recreateView) {\r\n            this.recreateView();\r\n        }\r\n        else {\r\n            this.updateContext();\r\n        }\r\n    }\r\n    recreateView() {\r\n        this.viewContainer.clear();\r\n        const isTemplateRef = this.xOutlet instanceof TemplateRef;\r\n        const templateRef = isTemplateRef ? this.xOutlet : this.templateRef;\r\n        this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, this.xOutletContext);\r\n    }\r\n    updateContext() {\r\n        const newCtx = this.xOutletContext;\r\n        const oldCtx = this.embeddedViewRef.context;\r\n        if (newCtx) {\r\n            for (const propName of Object.keys(newCtx)) {\r\n                oldCtx[propName] = newCtx[propName];\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ XOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XOutletDirective, selector: \"[xOutlet]\", inputs: { xOutletContext: \"xOutletContext\", xOutlet: \"xOutlet\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XOutletDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{ selector: '[xOutlet]' }]\r\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { xOutletContext: [{\r\n                type: Input\r\n            }], xOutlet: [{\r\n                type: Input\r\n            }] } });\n\nclass XOutletModule {\r\n}\r\n/** @nocollapse */ XOutletModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XOutletModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ XOutletModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.2\", ngImport: i0, type: XOutletModule, declarations: [XOutletDirective], imports: [CommonModule], exports: [XOutletDirective] });\r\n/** @nocollapse */ XOutletModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XOutletModule, imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XOutletModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [XOutletDirective],\r\n                    exports: [XOutletDirective],\r\n                    imports: [CommonModule]\r\n                }]\r\n        }] });\n\n/**\r\n * Outlet 指令名称\r\n * @selector x-outlet\r\n * @decorator Directive\r\n */\r\nconst XOutletPrefix = 'x-outlet';\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { XOutletDirective, XOutletModule, XOutletPrefix };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}