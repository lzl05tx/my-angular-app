{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ng-nest/ui/core';\nimport { XProperty, XDataConvert, XWithConfig, XIsChange, XSetData } from '@ng-nest/ui/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ng-nest/ui/link';\nimport { XLinkModule } from '@ng-nest/ui/link';\nimport * as i4 from '@ng-nest/ui/outlet';\nimport { XOutletModule } from '@ng-nest/ui/outlet';\n/**\r\n * Crumb\r\n * @selector x-crumb\r\n * @decorator component\r\n */\n\nfunction XCrumbComponent_li_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const node_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r2.label);\n  }\n}\n\nfunction XCrumbComponent_li_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction XCrumbComponent_li_2_span_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.separator);\n  }\n}\n\nfunction XCrumbComponent_li_2_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 7);\n    i0.ɵɵtemplate(1, XCrumbComponent_li_2_span_4_ng_container_1_Template, 2, 1, \"ng-container\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xOutlet\", ctx_r6.separator);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    $node: a0\n  };\n};\n\nfunction XCrumbComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\")(1, \"x-link\", 3);\n    i0.ɵɵlistener(\"click\", function XCrumbComponent_li_2_Template_x_link_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const node_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.action(\"click\", node_r2, $event));\n    });\n    i0.ɵɵtemplate(2, XCrumbComponent_li_2_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵtemplate(3, XCrumbComponent_li_2_ng_container_3_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, XCrumbComponent_li_2_span_4_Template, 2, 1, \"span\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", ctx_r1.nodeTpl ? node_r2.label : \"\")(\"icon\", node_r2.icon)(\"disabled\", node_r2.disabled || i_r3 === ctx_r1.nodes.length - 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.nodeTpl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.nodeTpl)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(7, _c0, node_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r3 !== ctx_r1.nodes.length - 1);\n  }\n}\n\nconst XCrumbPrefix = 'x-crumb';\nconst X_CONFIG_NAME = 'crumb';\n/**\r\n * Crumb Property\r\n */\n\nclass XCrumbProperty extends XProperty {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * @zh_CN 节点数据\r\n     * @en_US Node data\r\n     */\n\n    this.data = [];\n    /**\r\n     * @zh_CN 节点点击事件\r\n     * @en_US Node click event\r\n     */\n\n    this.nodeClick = new EventEmitter();\n  }\n\n}\n/** @nocollapse */\n\n\nXCrumbProperty.ɵfac = /* @__PURE__ */function () {\n  let ɵXCrumbProperty_BaseFactory;\n  return function XCrumbProperty_Factory(t) {\n    return (ɵXCrumbProperty_BaseFactory || (ɵXCrumbProperty_BaseFactory = i0.ɵɵgetInheritedFactory(XCrumbProperty)))(t || XCrumbProperty);\n  };\n}();\n/** @nocollapse */\n\n\nXCrumbProperty.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XCrumbProperty,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    data: \"data\",\n    nodeTpl: \"nodeTpl\",\n    separator: \"separator\"\n  },\n  outputs: {\n    nodeClick: \"nodeClick\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function XCrumbProperty_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n__decorate([XDataConvert()], XCrumbProperty.prototype, \"data\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME, '/')], XCrumbProperty.prototype, \"separator\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XCrumbProperty, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    nodeTpl: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input\n    }],\n    nodeClick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass XCrumbComponent extends XCrumbProperty {\n  constructor(cdr, configService) {\n    super();\n    this.cdr = cdr;\n    this.configService = configService;\n    this.nodes = [];\n    this._unSubject = new Subject();\n  }\n\n  ngOnChanges(changes) {\n    const {\n      data\n    } = changes;\n    XIsChange(data) && this.setData();\n  }\n\n  ngOnDestroy() {\n    this._unSubject.next();\n\n    this._unSubject.unsubscribe();\n  }\n\n  action(type, option, event) {\n    switch (type) {\n      case 'click':\n        this.nodeClick.emit({\n          event: event,\n          node: option\n        });\n        break;\n    }\n  }\n\n  trackByNode(_index, item) {\n    return item.id;\n  }\n\n  setData() {\n    XSetData(this.data, this._unSubject).subscribe(x => {\n      this.nodes = x;\n      this.cdr.detectChanges();\n    });\n  }\n\n}\n/** @nocollapse */\n\n\nXCrumbComponent.ɵfac = function XCrumbComponent_Factory(t) {\n  return new (t || XCrumbComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.XConfigService));\n};\n/** @nocollapse */\n\n\nXCrumbComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XCrumbComponent,\n  selectors: [[\"x-crumb\"]],\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[1, \"x-crumb\"], [\"crumbs\", \"\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"title\", \"icon\", \"disabled\", \"click\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"x-crumb-separator\", 4, \"ngIf\"], [1, \"x-crumb-separator\"], [4, \"xOutlet\"]],\n  template: function XCrumbComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ul\", 0, 1);\n      i0.ɵɵtemplate(2, XCrumbComponent_li_2_Template, 5, 9, \"li\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.nodes)(\"ngForTrackBy\", ctx.trackByNode);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i3.XLinkComponent, i4.XOutletDirective],\n  styles: [\".x-crumb{margin:0;padding:0;display:flex}.x-crumb>li{padding:0;white-space:nowrap;box-sizing:border-box;display:flex;align-items:center}.x-crumb>li .x-link.x-link-disabled{color:var(--x-text-400);cursor:text}.x-crumb-separator{margin:0 .5rem;font-weight:600;color:var(--x-text-400)}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XCrumbComponent, [{\n    type: Component,\n    args: [{\n      selector: `${XCrumbPrefix}`,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ul #crumbs class=\\\"x-crumb\\\">\\r\\n  <li *ngFor=\\\"let node of nodes; index as i; trackBy: trackByNode\\\">\\r\\n    <x-link\\r\\n      [title]=\\\"nodeTpl ? node.label : ''\\\"\\r\\n      [icon]=\\\"node.icon\\\"\\r\\n      [disabled]=\\\"node.disabled || i === nodes.length - 1\\\"\\r\\n      (click)=\\\"action('click', node, $event)\\\"\\r\\n    >\\r\\n      <ng-container *ngIf=\\\"!nodeTpl\\\">{{ node.label }}</ng-container>\\r\\n      <ng-container *ngTemplateOutlet=\\\"nodeTpl; context: { $node: node }\\\"></ng-container>\\r\\n    </x-link>\\r\\n    <span class=\\\"x-crumb-separator\\\" *ngIf=\\\"i !== nodes.length - 1\\\">\\r\\n      <ng-container *xOutlet=\\\"separator\\\">{{ separator }}</ng-container>\\r\\n    </span>\\r\\n  </li>\\r\\n</ul>\\r\\n\",\n      styles: [\".x-crumb{margin:0;padding:0;display:flex}.x-crumb>li{padding:0;white-space:nowrap;box-sizing:border-box;display:flex;align-items:center}.x-crumb>li .x-link.x-link-disabled{color:var(--x-text-400);cursor:text}.x-crumb-separator{margin:0 .5rem;font-weight:600;color:var(--x-text-400)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.XConfigService\n    }];\n  }, null);\n})();\n\nclass XCrumbModule {}\n/** @nocollapse */\n\n\nXCrumbModule.ɵfac = function XCrumbModule_Factory(t) {\n  return new (t || XCrumbModule)();\n};\n/** @nocollapse */\n\n\nXCrumbModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: XCrumbModule\n});\n/** @nocollapse */\n\nXCrumbModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, XLinkModule, XOutletModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XCrumbModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [XCrumbComponent, XCrumbProperty],\n      exports: [XCrumbComponent],\n      imports: [CommonModule, XLinkModule, XOutletModule]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { XCrumbComponent, XCrumbModule, XCrumbPrefix, XCrumbProperty };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","ViewEncapsulation","ChangeDetectionStrategy","NgModule","__decorate","i1","XProperty","XDataConvert","XWithConfig","XIsChange","XSetData","Subject","i2","CommonModule","i3","XLinkModule","i4","XOutletModule","XCrumbPrefix","X_CONFIG_NAME","XCrumbProperty","constructor","arguments","data","nodeClick","ɵfac","ɵcmp","prototype","type","args","template","nodeTpl","separator","XCrumbComponent","cdr","configService","nodes","_unSubject","ngOnChanges","changes","setData","ngOnDestroy","next","unsubscribe","action","option","event","emit","node","trackByNode","_index","item","id","subscribe","x","detectChanges","ChangeDetectorRef","XConfigService","NgForOf","NgIf","NgTemplateOutlet","XLinkComponent","XOutletDirective","selector","encapsulation","None","changeDetection","OnPush","styles","XCrumbModule","ɵmod","ɵinj","declarations","exports","imports"],"sources":["/Users/lzl/my-angular-app/node_modules/@ng-nest/ui/fesm2020/ng-nest-ui-crumb.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ng-nest/ui/core';\nimport { XProperty, XDataConvert, XWithConfig, XIsChange, XSetData } from '@ng-nest/ui/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@ng-nest/ui/link';\nimport { XLinkModule } from '@ng-nest/ui/link';\nimport * as i4 from '@ng-nest/ui/outlet';\nimport { XOutletModule } from '@ng-nest/ui/outlet';\n\n/**\r\n * Crumb\r\n * @selector x-crumb\r\n * @decorator component\r\n */\r\nconst XCrumbPrefix = 'x-crumb';\r\nconst X_CONFIG_NAME = 'crumb';\r\n/**\r\n * Crumb Property\r\n */\r\nclass XCrumbProperty extends XProperty {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * @zh_CN 节点数据\r\n         * @en_US Node data\r\n         */\r\n        this.data = [];\r\n        /**\r\n         * @zh_CN 节点点击事件\r\n         * @en_US Node click event\r\n         */\r\n        this.nodeClick = new EventEmitter();\r\n    }\r\n}\r\n/** @nocollapse */ XCrumbProperty.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbProperty, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XCrumbProperty.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XCrumbProperty, selector: \"ng-component\", inputs: { data: \"data\", nodeTpl: \"nodeTpl\", separator: \"separator\" }, outputs: { nodeClick: \"nodeClick\" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });\r\n__decorate([\r\n    XDataConvert()\r\n], XCrumbProperty.prototype, \"data\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME, '/')\r\n], XCrumbProperty.prototype, \"separator\", void 0);\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbProperty, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '' }]\r\n        }], propDecorators: { data: [{\r\n                type: Input\r\n            }], nodeTpl: [{\r\n                type: Input\r\n            }], separator: [{\r\n                type: Input\r\n            }], nodeClick: [{\r\n                type: Output\r\n            }] } });\n\nclass XCrumbComponent extends XCrumbProperty {\r\n    constructor(cdr, configService) {\r\n        super();\r\n        this.cdr = cdr;\r\n        this.configService = configService;\r\n        this.nodes = [];\r\n        this._unSubject = new Subject();\r\n    }\r\n    ngOnChanges(changes) {\r\n        const { data } = changes;\r\n        XIsChange(data) && this.setData();\r\n    }\r\n    ngOnDestroy() {\r\n        this._unSubject.next();\r\n        this._unSubject.unsubscribe();\r\n    }\r\n    action(type, option, event) {\r\n        switch (type) {\r\n            case 'click':\r\n                this.nodeClick.emit({\r\n                    event: event,\r\n                    node: option\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    trackByNode(_index, item) {\r\n        return item.id;\r\n    }\r\n    setData() {\r\n        XSetData(this.data, this._unSubject).subscribe((x) => {\r\n            this.nodes = x;\r\n            this.cdr.detectChanges();\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ XCrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.XConfigService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XCrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XCrumbComponent, selector: \"x-crumb\", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ul #crumbs class=\\\"x-crumb\\\">\\r\\n  <li *ngFor=\\\"let node of nodes; index as i; trackBy: trackByNode\\\">\\r\\n    <x-link\\r\\n      [title]=\\\"nodeTpl ? node.label : ''\\\"\\r\\n      [icon]=\\\"node.icon\\\"\\r\\n      [disabled]=\\\"node.disabled || i === nodes.length - 1\\\"\\r\\n      (click)=\\\"action('click', node, $event)\\\"\\r\\n    >\\r\\n      <ng-container *ngIf=\\\"!nodeTpl\\\">{{ node.label }}</ng-container>\\r\\n      <ng-container *ngTemplateOutlet=\\\"nodeTpl; context: { $node: node }\\\"></ng-container>\\r\\n    </x-link>\\r\\n    <span class=\\\"x-crumb-separator\\\" *ngIf=\\\"i !== nodes.length - 1\\\">\\r\\n      <ng-container *xOutlet=\\\"separator\\\">{{ separator }}</ng-container>\\r\\n    </span>\\r\\n  </li>\\r\\n</ul>\\r\\n\", styles: [\".x-crumb{margin:0;padding:0;display:flex}.x-crumb>li{padding:0;white-space:nowrap;box-sizing:border-box;display:flex;align-items:center}.x-crumb>li .x-link.x-link-disabled{color:var(--x-text-400);cursor:text}.x-crumb-separator{margin:0 .5rem;font-weight:600;color:var(--x-text-400)}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: i3.XLinkComponent, selector: \"x-link\" }, { kind: \"directive\", type: i4.XOutletDirective, selector: \"[xOutlet]\", inputs: [\"xOutletContext\", \"xOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: `${XCrumbPrefix}`, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ul #crumbs class=\\\"x-crumb\\\">\\r\\n  <li *ngFor=\\\"let node of nodes; index as i; trackBy: trackByNode\\\">\\r\\n    <x-link\\r\\n      [title]=\\\"nodeTpl ? node.label : ''\\\"\\r\\n      [icon]=\\\"node.icon\\\"\\r\\n      [disabled]=\\\"node.disabled || i === nodes.length - 1\\\"\\r\\n      (click)=\\\"action('click', node, $event)\\\"\\r\\n    >\\r\\n      <ng-container *ngIf=\\\"!nodeTpl\\\">{{ node.label }}</ng-container>\\r\\n      <ng-container *ngTemplateOutlet=\\\"nodeTpl; context: { $node: node }\\\"></ng-container>\\r\\n    </x-link>\\r\\n    <span class=\\\"x-crumb-separator\\\" *ngIf=\\\"i !== nodes.length - 1\\\">\\r\\n      <ng-container *xOutlet=\\\"separator\\\">{{ separator }}</ng-container>\\r\\n    </span>\\r\\n  </li>\\r\\n</ul>\\r\\n\", styles: [\".x-crumb{margin:0;padding:0;display:flex}.x-crumb>li{padding:0;white-space:nowrap;box-sizing:border-box;display:flex;align-items:center}.x-crumb>li .x-link.x-link-disabled{color:var(--x-text-400);cursor:text}.x-crumb-separator{margin:0 .5rem;font-weight:600;color:var(--x-text-400)}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.XConfigService }]; } });\n\nclass XCrumbModule {\r\n}\r\n/** @nocollapse */ XCrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ XCrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbModule, declarations: [XCrumbComponent, XCrumbProperty], imports: [CommonModule, XLinkModule, XOutletModule], exports: [XCrumbComponent] });\r\n/** @nocollapse */ XCrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbModule, imports: [CommonModule, XLinkModule, XOutletModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XCrumbModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [XCrumbComponent, XCrumbProperty],\r\n                    exports: [XCrumbComponent],\r\n                    imports: [CommonModule, XLinkModule, XOutletModule]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { XCrumbComponent, XCrumbModule, XCrumbPrefix, XCrumbProperty };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}