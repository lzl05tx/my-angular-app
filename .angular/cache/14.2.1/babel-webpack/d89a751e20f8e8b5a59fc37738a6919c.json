{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, Optional, Inject, ViewChild, QueryList, HostListener, ContentChildren, Directive, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport * as i4 from '@ng-nest/ui/core';\nimport { XInputBoolean, XWithConfig, XProperty, XIsChange, XClearClass, XIsEmpty, XIsFunction, XMoveBoxAnimation, XOpacityAnimation, fillDefault } from '@ng-nest/ui/core';\nimport { __decorate } from 'tslib';\nimport * as i7 from '@ng-nest/ui/alert';\nimport { XAlertProperty, XAlertModule } from '@ng-nest/ui/alert';\nimport * as i1 from '@ng-nest/ui/portal';\nimport { PortalResizablePrefix, XPortalModule } from '@ng-nest/ui/portal';\nimport { Subject, filter, take } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i3 from '@ng-nest/ui/i18n';\nimport { XI18nModule } from '@ng-nest/ui/i18n';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@ng-nest/ui/button';\nimport { XButtonModule } from '@ng-nest/ui/button';\nimport * as i8 from '@ng-nest/ui/outlet';\nimport { XOutletModule } from '@ng-nest/ui/outlet';\nimport * as i2$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport * as i1$1 from '@angular/cdk/drag-drop';\nimport { CdkDragHandle, CdkDrag, DragDropModule } from '@angular/cdk/drag-drop';\nimport * as i3$1 from '@ng-nest/ui/resizable';\nimport { XResizableModule } from '@ng-nest/ui/resizable';\nimport { XIconModule } from '@ng-nest/ui/icon';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { XInputModule } from '@ng-nest/ui/input';\n/**\r\n * Dialog\r\n * @selector x-dialog\r\n * @decorator component\r\n */\n\nconst _c0 = [\"*\"];\nconst _c1 = [\"dialogTpl\"];\n\nfunction XDialogComponent_ng_template_0_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵlistener(\"click\", function XDialogComponent_ng_template_0_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.onClose(\"close\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@x-opacity-animation\", ctx_r7.visible);\n  }\n}\n\nfunction XDialogComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵtemplate(0, XDialogComponent_ng_template_0_div_0_Template, 1, 1, \"div\", 4);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵlistener(\"@x-move-box-animation.done\", function XDialogComponent_ng_template_0_Template_div_animation_x_move_box_animation_done_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.moveDone($event));\n    });\n    i0.ɵɵelementStart(2, \"x-alert\", 6);\n    i0.ɵɵlistener(\"close\", function XDialogComponent_ng_template_0_Template_x_alert_close_2_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClose(\"close\"));\n    })(\"dragEnded\", function XDialogComponent_ng_template_0_Template_x_alert_dragEnded_2_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onDragEnded($event));\n    })(\"resizing\", function XDialogComponent_ng_template_0_Template_x_alert_resizing_2_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onResizing($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(3);\n\n    const _r4 = i0.ɵɵreference(5);\n\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.container && ctx_r1.hasBackdrop);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"x-dialog-maximize\", ctx_r1.isMaximize)(\"x-dialog-resizable\", ctx_r1.resizable)(\"x-dialog-default-maximize\", ctx_r1.isDefaultMaximize);\n    i0.ɵɵproperty(\"@x-move-box-animation\", ctx_r1.placement)(\"ngStyle\", ctx_r1.getStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"draggable\", ctx_r1.draggable && ctx_r1.dialogBox[\"draggable\"])(\"resizable\", ctx_r1.resizable && ctx_r1.dialogBox[\"resizable\"])(\"dragFreeDragPosition\", ctx_r1.dialogBox[\"distance\"])(\"offsetLeft\", ctx_r1.offsetLeft)(\"offsetTop\", ctx_r1.offsetTop)(\"minWidth\", ctx_r1.dialogBox[\"minWidth\"])(\"minHeight\", ctx_r1.dialogBox[\"minHeight\"])(\"dragBoundary\", \".cdk-overlay-container\")(\"title\", ctx_r1.title)(\"content\", _r2)(\"type\", ctx_r1.type)(\"effect\", ctx_r1.effect)(\"hideClose\", ctx_r1.hideClose)(\"closeText\", ctx_r1.closeText)(\"operationTpl\", _r4);\n  }\n}\n\nfunction XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_x_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"x-button\", 16);\n    i0.ɵɵlistener(\"click\", function XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_x_button_1_Template_x_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r19.onClose(\"cancel\"));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r17.getCancelText);\n  }\n}\n\nfunction XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_x_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"x-button\", 17);\n    i0.ɵɵlistener(\"click\", function XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_x_button_2_Template_x_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r21.onClose(\"confirm\"));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.getConfirmText);\n  }\n}\n\nfunction XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"x-buttons\", 13);\n    i0.ɵɵtemplate(1, XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_x_button_1_Template, 2, 1, \"x-button\", 14);\n    i0.ɵɵtemplate(2, XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_x_button_2_Template, 2, 1, \"x-button\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r16.showCancel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r16.showConfirm);\n  }\n}\n\nfunction XDialogComponent_ng_template_2_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, XDialogComponent_ng_template_2_ng_container_4_x_buttons_1_Template, 3, 2, \"x-buttons\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.showCancel || ctx_r15.showConfirm);\n  }\n}\n\nfunction XDialogComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 10);\n    i0.ɵɵtemplate(4, XDialogComponent_ng_template_2_ng_container_4_Template, 2, 1, \"ng-container\", 11);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵclassProp(\"x-dialog-buttons-center\", ctx_r3.buttonsCenter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xOutlet\", ctx_r3.footer);\n  }\n}\n\nfunction XDialogComponent_ng_template_4_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"x-button\", 18);\n    i0.ɵɵlistener(\"click\", function XDialogComponent_ng_template_4_ng_container_0_Template_x_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r24.onSize());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r23.isMaximize ? \"fto-minimize\" : \"fto-maximize\")(\"onlyIcon\", true);\n  }\n}\n\nfunction XDialogComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, XDialogComponent_ng_template_4_ng_container_0_Template, 2, 2, \"ng-container\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.maximize || ctx_r5.resizable);\n  }\n}\n\nfunction XDialogComponent_ng_container_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction XDialogComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, XDialogComponent_ng_container_6_ng_container_1_Template, 1, 0, \"ng-container\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0);\n  }\n}\n\nfunction XDialogPortalComponent_ng_template_2_Template(rf, ctx) {}\n\nconst XDialogPrefix = 'x-dialog';\nconst X_DIALOG_CONFIG_NAME = 'dialog';\nconst XDialogContainer = 'x-dialog-overlay';\nconst X_DIALOG_DATA = new InjectionToken('XDialogData');\n/**\r\n * Dialog Property\r\n */\n\nclass XDialogProperty extends XAlertProperty {\n  constructor() {\n    super(...arguments);\n    this.visible = false;\n    /**\r\n     * @zh_CN 类型\r\n     * @en_US Types of\r\n     */\n\n    this.type = 'info';\n    /**\r\n     * @zh_CN 取消按钮的事件\r\n     * @en_US Cancel button event\r\n     */\n\n    this.cancel = new EventEmitter();\n    /**\r\n     * @zh_CN 确认按钮的事件\r\n     * @en_US Confirm button event\r\n     */\n\n    this.confirm = new EventEmitter();\n    /**\r\n     * @zh_CN 确认按钮的事件\r\n     * @en_US Confirm button event\r\n     */\n\n    this.close = new EventEmitter();\n    /**\r\n     * @zh_CN 显示/隐藏改变事件\r\n     * @en_US Show/hide change events\r\n     */\n\n    this.visibleChange = new EventEmitter();\n    /**\r\n     * @zh_CN 弹出完成动画加载\r\n     * @en_US Pop up complete animation loading\r\n     */\n\n    this.showDone = new EventEmitter();\n    /**\r\n     * @zh_CN 关闭完成动画\r\n     * @en_US Close complete animation\r\n     */\n\n    this.closeDone = new EventEmitter();\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogProperty.ɵfac = /* @__PURE__ */function () {\n  let ɵXDialogProperty_BaseFactory;\n  return function XDialogProperty_Factory(t) {\n    return (ɵXDialogProperty_BaseFactory || (ɵXDialogProperty_BaseFactory = i0.ɵɵgetInheritedFactory(XDialogProperty)))(t || XDialogProperty);\n  };\n}();\n/** @nocollapse */\n\n\nXDialogProperty.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XDialogProperty,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    visible: \"visible\",\n    placement: \"placement\",\n    offset: \"offset\",\n    type: \"type\",\n    width: \"width\",\n    height: \"height\",\n    minWidth: \"minWidth\",\n    minHeight: \"minHeight\",\n    effect: \"effect\",\n    footer: \"footer\",\n    showCancel: \"showCancel\",\n    cancelText: \"cancelText\",\n    showConfirm: \"showConfirm\",\n    confirmText: \"confirmText\",\n    backdropClose: \"backdropClose\",\n    hasBackdrop: \"hasBackdrop\",\n    className: \"className\",\n    buttonsCenter: \"buttonsCenter\",\n    draggable: \"draggable\",\n    resizable: \"resizable\",\n    maximize: \"maximize\",\n    beforeClose: \"beforeClose\"\n  },\n  outputs: {\n    cancel: \"cancel\",\n    confirm: \"confirm\",\n    close: \"close\",\n    visibleChange: \"visibleChange\",\n    showDone: \"showDone\",\n    closeDone: \"closeDone\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function XDialogProperty_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n__decorate([XInputBoolean()], XDialogProperty.prototype, \"visible\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, 'center')], XDialogProperty.prototype, \"placement\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, '1rem')], XDialogProperty.prototype, \"offset\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, '32rem')], XDialogProperty.prototype, \"width\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, '18rem')], XDialogProperty.prototype, \"minWidth\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, '8rem')], XDialogProperty.prototype, \"minHeight\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, 'white')], XDialogProperty.prototype, \"effect\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, true)], XDialogProperty.prototype, \"showCancel\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME)], XDialogProperty.prototype, \"cancelText\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, true)], XDialogProperty.prototype, \"showConfirm\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME)], XDialogProperty.prototype, \"confirmText\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, true)], XDialogProperty.prototype, \"backdropClose\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, true)], XDialogProperty.prototype, \"hasBackdrop\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, '')], XDialogProperty.prototype, \"className\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME), XInputBoolean()], XDialogProperty.prototype, \"buttonsCenter\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, false), XInputBoolean()], XDialogProperty.prototype, \"draggable\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, false), XInputBoolean()], XDialogProperty.prototype, \"resizable\", void 0);\n\n__decorate([XWithConfig(X_DIALOG_CONFIG_NAME, false), XInputBoolean()], XDialogProperty.prototype, \"maximize\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogProperty, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], null, {\n    visible: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    minHeight: [{\n      type: Input\n    }],\n    effect: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    showCancel: [{\n      type: Input\n    }],\n    cancelText: [{\n      type: Input\n    }],\n    showConfirm: [{\n      type: Input\n    }],\n    confirmText: [{\n      type: Input\n    }],\n    backdropClose: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    className: [{\n      type: Input\n    }],\n    buttonsCenter: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input\n    }],\n    resizable: [{\n      type: Input\n    }],\n    maximize: [{\n      type: Input\n    }],\n    beforeClose: [{\n      type: Input\n    }],\n    cancel: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    visibleChange: [{\n      type: Output\n    }],\n    showDone: [{\n      type: Output\n    }],\n    closeDone: [{\n      type: Output\n    }]\n  });\n})();\n/**\r\n * Dialog Container\r\n * @selector x-dialog-container\r\n * @decorator component\r\n */\n\n\nconst XDialogContainerPrefix = 'x-dialog-container';\nconst X_DIALOG_CONTAINER = new InjectionToken('X_DIALOG_CONTAINER');\n/**\r\n * Dialog Container Property\r\n */\n\nclass XDialogContainerProperty extends XProperty {}\n/** @nocollapse */\n\n\nXDialogContainerProperty.ɵfac = /* @__PURE__ */function () {\n  let ɵXDialogContainerProperty_BaseFactory;\n  return function XDialogContainerProperty_Factory(t) {\n    return (ɵXDialogContainerProperty_BaseFactory || (ɵXDialogContainerProperty_BaseFactory = i0.ɵɵgetInheritedFactory(XDialogContainerProperty)))(t || XDialogContainerProperty);\n  };\n}();\n/** @nocollapse */\n\n\nXDialogContainerProperty.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XDialogContainerProperty,\n  selectors: [[\"ng-component\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function XDialogContainerProperty_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogContainerProperty, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], null, null);\n})();\n\nclass XDialogContainerComponent extends XDialogContainerProperty {\n  constructor() {\n    super();\n    this._has = true;\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogContainerComponent.ɵfac = function XDialogContainerComponent_Factory(t) {\n  return new (t || XDialogContainerComponent)();\n};\n/** @nocollapse */\n\n\nXDialogContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XDialogContainerComponent,\n  selectors: [[\"x-dialog-container\"]],\n  hostVars: 2,\n  hostBindings: function XDialogContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-dialog-container\", ctx._has);\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: X_DIALOG_CONTAINER,\n    useExisting: XDialogContainerComponent\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function XDialogContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".x-dialog-container{margin:0;padding:0;position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.x-dialog-container x-dialog{display:flex;position:absolute;width:100%;height:100%;z-index:-1;transition:z-index .4s;top:0;left:0}.x-dialog-container .x-dialog{position:absolute;display:block;outline:0;z-index:1001;width:initial;height:initial}.x-dialog-container .x-dialog-top,.x-dialog-container .x-dialog-bottom{justify-content:center}.x-dialog-container .x-dialog-center{justify-content:center;align-items:center}.x-dialog-container .x-dialog-left,.x-dialog-container .x-dialog-right{align-items:center}.x-dialog-container .x-dialog-visible{display:flex;z-index:1000}.x-dialog-container .x-dialog-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;background:rgba(0,0,0,.32)}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'x-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: X_DIALOG_CONTAINER,\n        useExisting: XDialogContainerComponent\n      }],\n      template: \"<ng-content></ng-content>\\r\\n\",\n      styles: [\".x-dialog-container{margin:0;padding:0;position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.x-dialog-container x-dialog{display:flex;position:absolute;width:100%;height:100%;z-index:-1;transition:z-index .4s;top:0;left:0}.x-dialog-container .x-dialog{position:absolute;display:block;outline:0;z-index:1001;width:initial;height:initial}.x-dialog-container .x-dialog-top,.x-dialog-container .x-dialog-bottom{justify-content:center}.x-dialog-container .x-dialog-center{justify-content:center;align-items:center}.x-dialog-container .x-dialog-left,.x-dialog-container .x-dialog-right{align-items:center}.x-dialog-container .x-dialog-visible{display:flex;z-index:1000}.x-dialog-container .x-dialog-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;background:rgba(0,0,0,.32)}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    _has: [{\n      type: HostBinding,\n      args: ['class.x-dialog-container']\n    }]\n  });\n})();\n\nclass XDialogComponent extends XDialogProperty {\n  constructor(renderer, elementRef, cdr, viewContainerRef, protalService, overlay, i18n, configService, container) {\n    super();\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.viewContainerRef = viewContainerRef;\n    this.protalService = protalService;\n    this.overlay = overlay;\n    this.i18n = i18n;\n    this.configService = configService;\n    this.container = container;\n    this.locale = {};\n    this.initHeight = 0;\n    this.initContentHeight = 0;\n    this.isMaximize = false;\n    this.isDefaultMaximize = false;\n    this.dialogBox = {};\n    this.contentBox = {};\n    this.distance = {\n      x: 0,\n      y: 0\n    };\n    this.viewInit = false;\n    this.action = null;\n    this.containerInit = false;\n    this._unSubject = new Subject();\n    this.scrollStrategy = this.protalService.overlay.scrollStrategies.block();\n  }\n\n  get getVisible() {\n    return this.visible;\n  }\n\n  get getCancelText() {\n    return this.cancelText || this.locale.cancelText;\n  }\n\n  get getConfirmText() {\n    return this.confirmText || this.locale.confirmText;\n  }\n\n  get getStyle() {\n    return this.container ? { ...this.protalService.setContainerStyle(this.placement, this.offset),\n      width: this.width,\n      height: this.height,\n      minWidth: this.minWidth,\n      minHeight: this.minHeight\n    } : {};\n  }\n\n  ngOnInit() {\n    this.i18n.localeChange.pipe(map(x => x.dialog), takeUntil(this._unSubject)).subscribe(x => {\n      this.locale = x;\n      this.cdr.markForCheck();\n    });\n    this.dialogBox['draggable'] = this.draggable;\n    this.dialogBox['resizable'] = this.resizable;\n    this.setClassMap();\n  }\n\n  ngOnChanges(changes) {\n    const {\n      visible,\n      placement\n    } = changes;\n    XIsChange(visible) && this.setVisible();\n\n    if (XIsChange(placement)) {\n      this.setClassMap();\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe();\n\n    this._unSubject.next();\n\n    this._unSubject.unsubscribe();\n  }\n\n  ngAfterViewInit() {\n    this.viewInit = true;\n    setTimeout(() => this.visible && this.create());\n  }\n\n  unsubscribe() {\n    this.backdropClick$?.unsubscribe();\n  }\n\n  setClassMap() {\n    for (let key in this.classMap) {\n      this.renderer.removeClass(this.elementRef.nativeElement, key);\n    }\n\n    XClearClass(this.classMap);\n    this.classMap = {\n      [`${XDialogPrefix}-${this.placement}`]: !XIsEmpty(this.placement)\n    };\n\n    for (let key in this.classMap) {\n      this.renderer.addClass(this.elementRef.nativeElement, key);\n    }\n  }\n\n  setVisible() {\n    if (!this.viewInit) return;\n\n    if (this.visible) {\n      this.create();\n    } else {\n      this.onClose('close', false);\n    }\n  }\n\n  create() {\n    if (this.container) {\n      this.containerInit = true;\n      return;\n    }\n\n    this.dialogRef = this.protalService.attach({\n      content: this.dialogTpl,\n      viewContainerRef: this.viewContainerRef,\n      overlayConfig: {\n        panelClass: [XDialogContainer, this.className],\n        hasBackdrop: Boolean(this.hasBackdrop),\n        scrollStrategy: this.overlay.scrollStrategies.block(),\n        width: this.width,\n        height: this.height,\n        minWidth: this.minWidth,\n        minHeight: this.minHeight,\n        positionStrategy: this.protalService.setPlace(this.placement, this.offset)\n      }\n    });\n    const {\n      hostElement,\n      overlayElement\n    } = this.dialogRef.overlayRef;\n    this.overlayElement = overlayElement;\n    this.setWidthHeight();\n    Object.assign(this.dialogBox, {\n      width: this.width,\n      height: this.height,\n      minWidth: this.minWidth,\n      minHeight: this.minHeight\n    });\n\n    if (this.resizable && !this.isDefaultMaximize) {\n      this.renderer.addClass(hostElement, PortalResizablePrefix);\n      setTimeout(() => {\n        Object.assign(this.dialogBox, this.protalService.setResizable(this.overlayElement, this.placement));\n        this.offsetLeft = this.overlayElement.offsetLeft;\n        this.offsetTop = this.overlayElement.offsetTop;\n        const dialogDraggable = this.overlayElement?.querySelector('.x-alert-draggable');\n        this.initHeight = dialogDraggable.clientHeight;\n        this.dialogContent = this.overlayElement?.querySelector('.x-dialog-content');\n        this.initContentHeight = this.dialogContent.clientHeight;\n      });\n    }\n\n    if (this.hasBackdrop && this.backdropClose && this.dialogRef?.overlayRef) {\n      this.backdropClick$ = this.dialogRef.overlayRef.backdropClick().subscribe(() => this.onClose('close'));\n    }\n  }\n\n  setWidthHeight() {\n    const ws = ['100%', '100vw'];\n    const hs = ['100%', '100vh'];\n\n    if (ws.includes(this.width) && hs.includes(this.height)) {\n      this.isDefaultMaximize = true;\n      this.resizable = false;\n      this.draggable = false;\n      this.maximize = false;\n    }\n  }\n\n  portalAttached() {\n    return this.dialogRef?.overlayRef?.hasAttached();\n  }\n\n  onClose(action, execFunction = true) {\n    if (!this.portalAttached() && !this.container) return;\n    if (this.container && !this.containerInit) return;\n\n    if (XIsFunction(this.beforeClose) && execFunction) {\n      this.beforeClose(action);\n      this.action = action;\n    } else {\n      this.visible = false;\n      this.visibleChange.emit(this.visible);\n\n      if (this.portalAttached()) {\n        this.dialogRef?.overlayRef?.detach();\n        this.unsubscribe();\n      }\n\n      if ([action, this.action].includes('confirm')) {\n        this.confirm.emit();\n      }\n\n      if ([action, this.action].includes('cancel')) {\n        this.cancel.emit();\n      }\n\n      this.containerInit = false;\n      this.action = null;\n      this.close.emit();\n    }\n  }\n\n  onDragEnded($event) {\n    this.distance = {\n      x: this.distance.x + $event.distance.x,\n      y: this.distance.y + $event.distance.y\n    };\n  }\n\n  onSize() {\n    if (!this.dialogRef) return;\n    this.isMaximize = !this.isMaximize;\n\n    if (this.isMaximize) {\n      this.onMaximize();\n    } else {\n      this.onMinimize();\n    }\n  }\n\n  onMaximize() {\n    this.dialogRef.overlayRef?.updateSize({\n      width: '100%',\n      height: '100%',\n      minWidth: '100%',\n      minHeight: '100%'\n    });\n    this.dialogBox['minWidth'] = '100%';\n    this.dialogBox['minHeight'] = '100%';\n    this.dialogBox['draggable'] = false;\n    this.dialogBox['resizable'] = false;\n\n    if (this.resizable) {\n      this.renderer.setStyle(this.overlayElement, 'margin', '0 0 0 0');\n    }\n\n    if (this.draggable) {\n      this.dialogBox['distance'] = {\n        x: 0,\n        y: 0\n      };\n    }\n  }\n\n  onMinimize() {\n    this.dialogBox['minWidth'] = this.minWidth;\n    this.dialogBox['minHeight'] = this.minHeight;\n    this.dialogBox['draggable'] = this.draggable;\n    this.dialogBox['resizable'] = this.resizable;\n    this.dialogRef.overlayRef?.updateSize({\n      width: this.dialogBox['width'],\n      height: this.dialogBox['height'],\n      minWidth: this.dialogBox['minWidth'],\n      minHeight: this.dialogBox['minHeight']\n    });\n\n    if (this.draggable) {\n      this.dialogBox['distance'] = { ...this.distance\n      };\n    }\n\n    if (this.resizable) {\n      if (this.dialogBox['marginTop']) {\n        this.renderer.setStyle(this.overlayElement, 'margin-top', `${this.dialogBox['marginTop']}`);\n      }\n\n      if (this.dialogBox['marginLeft']) {\n        this.renderer.setStyle(this.overlayElement, 'margin-left', `${this.dialogBox['marginLeft']}`);\n      }\n\n      if (this.dialogBox['marginRight']) {\n        this.renderer.setStyle(this.overlayElement, 'margin-right', `${this.dialogBox['marginRight']}`);\n      }\n\n      if (this.dialogBox['marginBottom']) {\n        this.renderer.setStyle(this.overlayElement, 'margin-bottom', `${this.dialogBox['marginBottom']}`);\n      }\n    }\n  }\n\n  moveDone($event) {\n    if ($event.toState === 'void') {\n      this.closeDone.emit($event);\n      this.isMaximize = false;\n      this.dialogBox = {\n        draggable: this.draggable,\n        resizable: this.resizable\n      };\n      this.distance = {\n        x: 0,\n        y: 0\n      };\n      this.dialogRef?.overlayRef?.dispose();\n    } else {\n      this.showDone.emit($event);\n    }\n  }\n\n  onResizing(event) {\n    const contentHeight = Number(this.initContentHeight) + Number(event.clientHeight) - Number(this.initHeight);\n    this.renderer.setStyle(this.dialogContent, 'max-height', 'initial');\n    this.renderer.setStyle(this.dialogContent, 'flex', 'initial');\n\n    if (['top-start', 'top-end', 'bottom', 'top', 'bottom-start', 'bottom-end'].includes(event.direction)) {\n      this.renderer.setStyle(this.dialogContent, 'height', `${contentHeight}px`);\n    }\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogComponent.ɵfac = function XDialogComponent_Factory(t) {\n  return new (t || XDialogComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i1.XPortalService), i0.ɵɵdirectiveInject(i2.Overlay), i0.ɵɵdirectiveInject(i3.XI18nService), i0.ɵɵdirectiveInject(i4.XConfigService), i0.ɵɵdirectiveInject(X_DIALOG_CONTAINER, 8));\n};\n/** @nocollapse */\n\n\nXDialogComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XDialogComponent,\n  selectors: [[\"x-dialog\"]],\n  viewQuery: function XDialogComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialogTpl = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function XDialogComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-dialog-visible\", ctx.getVisible);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 7,\n  vars: 1,\n  consts: [[\"dialogTpl\", \"\"], [\"contentTpl\", \"\"], [\"operationTpl\", \"\"], [4, \"ngIf\"], [\"class\", \"x-dialog-backdrop\", 3, \"click\", 4, \"ngIf\"], [1, \"x-dialog\", 3, \"ngStyle\"], [\"showIcon\", \"false\", \"duration\", \"0\", \"manual\", \"\", \"disabledAnimation\", \"\", 3, \"draggable\", \"resizable\", \"dragFreeDragPosition\", \"offsetLeft\", \"offsetTop\", \"minWidth\", \"minHeight\", \"dragBoundary\", \"title\", \"content\", \"type\", \"effect\", \"hideClose\", \"closeText\", \"operationTpl\", \"close\", \"dragEnded\", \"resizing\"], [1, \"x-dialog-backdrop\", 3, \"click\"], [1, \"x-dialog-inner\"], [1, \"x-dialog-content\"], [1, \"x-dialog-buttons\"], [4, \"xOutlet\"], [\"space\", \"1\", 4, \"ngIf\"], [\"space\", \"1\"], [3, \"click\", 4, \"ngIf\"], [\"type\", \"primary\", 3, \"click\", 4, \"ngIf\"], [3, \"click\"], [\"type\", \"primary\", 3, \"click\"], [\"size\", \"small\", 3, \"icon\", \"onlyIcon\", \"click\"], [4, \"ngTemplateOutlet\"]],\n  template: function XDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, XDialogComponent_ng_template_0_Template, 3, 24, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(2, XDialogComponent_ng_template_2_Template, 5, 3, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(4, XDialogComponent_ng_template_4_Template, 1, 1, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(6, XDialogComponent_ng_container_6_Template, 2, 1, \"ng-container\", 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.container && ctx.visible);\n    }\n  },\n  dependencies: [i5.NgIf, i5.NgTemplateOutlet, i5.NgStyle, i6.XButtonComponent, i6.XButtonsComponent, i7.XAlertComponent, i8.XOutletDirective],\n  styles: [\".x-dialog{margin:0;padding:0;width:100%;height:100%}.x-dialog>x-alert{height:100%}.x-dialog>x-alert .x-alert{min-height:100%;height:-moz-fit-content;height:fit-content;align-items:inherit;padding:0}.x-dialog>x-alert .x-alert-inner{min-height:100%;display:flex;flex-direction:column}.x-dialog>x-alert .x-alert-title{padding:1rem 1rem 0}.x-dialog>x-alert .x-alert-content{flex:1;display:flex;flex-direction:column;padding:0 1rem .5rem}.x-dialog-inner{display:flex;flex-direction:column;margin:.5rem 0;flex:1}.x-dialog-buttons{display:flex;justify-content:flex-end}.x-dialog-buttons>x-buttons{margin-top:1rem;align-self:flex-end}.x-dialog-buttons-center{justify-content:center}.x-dialog-content{display:inline-flex;flex-direction:column;flex:1;max-height:70vh;overflow:auto;min-height:2rem}.x-dialog-maximize>x-alert .x-alert{left:0!important;top:0!important}.x-dialog-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}.x-dialog-default-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important;flex:initial}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [XMoveBoxAnimation, XOpacityAnimation]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogComponent, [{\n    type: Component,\n    args: [{\n      selector: `${XDialogPrefix}`,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [XMoveBoxAnimation, XOpacityAnimation],\n      template: \"<ng-template #dialogTpl>\\r\\n  <div class=\\\"x-dialog-backdrop\\\" *ngIf=\\\"container && hasBackdrop\\\" [@x-opacity-animation]=\\\"visible\\\" (click)=\\\"onClose('close')\\\"></div>\\r\\n  <div\\r\\n    class=\\\"x-dialog\\\"\\r\\n    [@x-move-box-animation]=\\\"placement\\\"\\r\\n    (@x-move-box-animation.done)=\\\"moveDone($event)\\\"\\r\\n    [class.x-dialog-maximize]=\\\"isMaximize\\\"\\r\\n    [class.x-dialog-resizable]=\\\"resizable\\\"\\r\\n    [class.x-dialog-default-maximize]=\\\"isDefaultMaximize\\\"\\r\\n    [ngStyle]=\\\"getStyle\\\"\\r\\n  >\\r\\n    <x-alert\\r\\n      [draggable]=\\\"draggable && dialogBox['draggable']\\\"\\r\\n      [resizable]=\\\"resizable && dialogBox['resizable']\\\"\\r\\n      [dragFreeDragPosition]=\\\"dialogBox['distance']\\\"\\r\\n      [offsetLeft]=\\\"offsetLeft\\\"\\r\\n      [offsetTop]=\\\"offsetTop\\\"\\r\\n      [minWidth]=\\\"dialogBox['minWidth']\\\"\\r\\n      [minHeight]=\\\"dialogBox['minHeight']\\\"\\r\\n      [dragBoundary]=\\\"'.cdk-overlay-container'\\\"\\r\\n      [title]=\\\"title\\\"\\r\\n      [content]=\\\"contentTpl\\\"\\r\\n      [type]=\\\"type\\\"\\r\\n      [effect]=\\\"effect\\\"\\r\\n      [hideClose]=\\\"hideClose\\\"\\r\\n      [closeText]=\\\"closeText\\\"\\r\\n      [operationTpl]=\\\"operationTpl\\\"\\r\\n      (close)=\\\"onClose('close')\\\"\\r\\n      (dragEnded)=\\\"onDragEnded($event)\\\"\\r\\n      (resizing)=\\\"onResizing($event)\\\"\\r\\n      showIcon=\\\"false\\\"\\r\\n      duration=\\\"0\\\"\\r\\n      manual\\r\\n      disabledAnimation\\r\\n    ></x-alert>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #contentTpl>\\r\\n  <div class=\\\"x-dialog-inner\\\">\\r\\n    <div class=\\\"x-dialog-content\\\">\\r\\n      <ng-content></ng-content>\\r\\n    </div>\\r\\n    <div class=\\\"x-dialog-buttons\\\" [class.x-dialog-buttons-center]=\\\"buttonsCenter\\\">\\r\\n      <ng-container *xOutlet=\\\"footer\\\">\\r\\n        <x-buttons space=\\\"1\\\" *ngIf=\\\"showCancel || showConfirm\\\">\\r\\n          <x-button *ngIf=\\\"showCancel\\\" (click)=\\\"onClose('cancel')\\\">{{ getCancelText }}</x-button>\\r\\n          <x-button *ngIf=\\\"showConfirm\\\" type=\\\"primary\\\" (click)=\\\"onClose('confirm')\\\">{{ getConfirmText }}</x-button>\\r\\n        </x-buttons>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #operationTpl>\\r\\n  <ng-container *ngIf=\\\"maximize || resizable\\\">\\r\\n    <x-button size=\\\"small\\\" [icon]=\\\"isMaximize ? 'fto-minimize' : 'fto-maximize'\\\" [onlyIcon]=\\\"true\\\" (click)=\\\"onSize()\\\"></x-button>\\r\\n  </ng-container>\\r\\n</ng-template>\\r\\n\\r\\n<ng-container *ngIf=\\\"container && visible\\\">\\r\\n  <ng-container *ngTemplateOutlet=\\\"dialogTpl\\\"></ng-container>\\r\\n</ng-container>\\r\\n\",\n      styles: [\".x-dialog{margin:0;padding:0;width:100%;height:100%}.x-dialog>x-alert{height:100%}.x-dialog>x-alert .x-alert{min-height:100%;height:-moz-fit-content;height:fit-content;align-items:inherit;padding:0}.x-dialog>x-alert .x-alert-inner{min-height:100%;display:flex;flex-direction:column}.x-dialog>x-alert .x-alert-title{padding:1rem 1rem 0}.x-dialog>x-alert .x-alert-content{flex:1;display:flex;flex-direction:column;padding:0 1rem .5rem}.x-dialog-inner{display:flex;flex-direction:column;margin:.5rem 0;flex:1}.x-dialog-buttons{display:flex;justify-content:flex-end}.x-dialog-buttons>x-buttons{margin-top:1rem;align-self:flex-end}.x-dialog-buttons-center{justify-content:center}.x-dialog-content{display:inline-flex;flex-direction:column;flex:1;max-height:70vh;overflow:auto;min-height:2rem}.x-dialog-maximize>x-alert .x-alert{left:0!important;top:0!important}.x-dialog-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}.x-dialog-default-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important;flex:initial}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i1.XPortalService\n    }, {\n      type: i2.Overlay\n    }, {\n      type: i3.XI18nService\n    }, {\n      type: i4.XConfigService\n    }, {\n      type: XDialogContainerComponent,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [X_DIALOG_CONTAINER]\n      }]\n    }];\n  }, {\n    getVisible: [{\n      type: HostBinding,\n      args: ['class.x-dialog-visible']\n    }],\n    dialogTpl: [{\n      type: ViewChild,\n      args: ['dialogTpl', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass XDialogPortalComponent extends BasePortalOutlet {\n  constructor(renderer) {\n    super();\n    this.renderer = renderer;\n    this.animationChanged = new EventEmitter();\n    this.offsetLeft = 0;\n    this.offsetTop = 0;\n    this.minWidth = '0rem';\n    this.minHeight = '0rem';\n    this.initHeight = 0;\n    this.initContentHeight = 0;\n    this.defaultMaximize = false;\n    this.distance = {\n      x: 0,\n      y: 0\n    };\n    this.dialogBox = {};\n  }\n\n  done({\n    toState,\n    totalTime\n  }) {\n    this.animationChanged.next({\n      action: 'done',\n      state: toState,\n      totalTime\n    });\n  }\n\n  start({\n    toState,\n    totalTime\n  }) {\n    this.animationChanged.next({\n      action: 'start',\n      state: toState,\n      totalTime\n    });\n  }\n\n  ngOnInit() {\n    this.dialogBox['draggable'] = this.defaultMaximize ? this.dialogBox['draggable'] : this.option.draggable;\n    this.dialogBox['resizable'] = this.defaultMaximize ? this.dialogBox['resizable'] : this.option.resizable;\n  }\n\n  ngAfterViewInit() {\n    let list = new QueryList();\n\n    if (this.dialogRef.dragHandleRefs.length === 0) {\n      this.dialogBox['draggable'] = false;\n      this.option.draggable = false;\n      return;\n    }\n\n    for (let item of this.dialogRef.dragHandleRefs) {\n      list.reset([...list.toArray(), new CdkDragHandle(item, this.dragRef)]);\n    }\n\n    this.dragRef._handles = list;\n  }\n\n  attachComponentPortal(portal) {\n    if (this.portalOutlet.hasAttached()) {\n      throw Error('dialog portal has attached');\n    }\n\n    return this.portalOutlet.attachComponentPortal(portal);\n  }\n\n  attachTemplatePortal(portal) {\n    if (this.portalOutlet.hasAttached()) {\n      throw Error('dialog portal has attached');\n    }\n\n    return this.portalOutlet.attachTemplatePortal(portal);\n  }\n\n  resizing(event) {\n    const contentHeight = Number(this.initContentHeight) + Number(event.clientHeight) - Number(this.initHeight);\n    this.renderer.setStyle(this.dialogContent, 'max-height', 'initial');\n    this.renderer.setStyle(this.dialogContent, 'flex', 'initial');\n\n    if (['top-start', 'top-end', 'bottom', 'top', 'bottom-start', 'bottom-end'].includes(event.direction)) {\n      this.renderer.setStyle(this.dialogContent, 'height', `${contentHeight}px`);\n    }\n  }\n\n  onDragEnded(event) {\n    this.distance = {\n      x: this.distance.x + event.distance.x,\n      y: this.distance.y + event.distance.y\n    };\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogPortalComponent.ɵfac = function XDialogPortalComponent_Factory(t) {\n  return new (t || XDialogPortalComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n/** @nocollapse */\n\n\nXDialogPortalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XDialogPortalComponent,\n  selectors: [[\"x-dialog-portal\"]],\n  contentQueries: function XDialogPortalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkDragHandle, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.handles = _t);\n    }\n  },\n  viewQuery: function XDialogPortalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      i0.ɵɵviewQuery(CdkDrag, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.portalOutlet = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dragRef = _t.first);\n    }\n  },\n  hostVars: 1,\n  hostBindings: function XDialogPortalComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@x-move-box-animation.done\", function XDialogPortalComponent_animation_x_move_box_animation_done_HostBindingHandler($event) {\n        return ctx.done($event);\n      })(\"@x-move-box-animation.start\", function XDialogPortalComponent_animation_x_move_box_animation_start_HostBindingHandler($event) {\n        return ctx.start($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@x-move-box-animation\", ctx.placement);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 10,\n  consts: [[\"cdkDrag\", \"\", 1, \"x-dialog-portal\", 3, \"cdkDragDisabled\", \"cdkDragBoundary\", \"cdkDragFreeDragPosition\", \"xResizable\", \"offsetLeft\", \"offsetTop\", \"resizing\", \"cdkDragEnded\"], [\"dragRef\", \"\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function XDialogPortalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"resizing\", function XDialogPortalComponent_Template_div_resizing_0_listener($event) {\n        return ctx.resizing($event);\n      })(\"cdkDragEnded\", function XDialogPortalComponent_Template_div_cdkDragEnded_0_listener($event) {\n        return ctx.onDragEnded($event);\n      });\n      i0.ɵɵtemplate(2, XDialogPortalComponent_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"min-width\", ctx.dialogBox[\"minWidth\"])(\"min-height\", ctx.dialogBox[\"minHeight\"]);\n      i0.ɵɵproperty(\"cdkDragDisabled\", !ctx.option.draggable && !ctx.dialogBox[\"draggable\"])(\"cdkDragBoundary\", \".cdk-overlay-container\")(\"cdkDragFreeDragPosition\", ctx.dialogBox[\"distance\"])(\"xResizable\", ctx.option.resizable && ctx.dialogBox[\"resizable\"])(\"offsetLeft\", ctx.offsetLeft)(\"offsetTop\", ctx.offsetTop);\n    }\n  },\n  dependencies: [i1$1.CdkDrag, i2$1.CdkPortalOutlet, i3$1.XResizableDirective],\n  styles: [\".x-dialog-portal{margin:0;padding:0;width:100%;height:100%;display:block;padding:1rem;box-sizing:border-box;min-height:inherit;max-height:inherit;background-color:var(--x-background);box-shadow:var(--x-box-shadow) var(--x-box-shadow-light-color);border:.0625rem solid transparent;border-radius:var(--x-border-radius)}.x-dialog-portal-title{font-weight:600;color:var(--x-text-300);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;height:3rem;line-height:3rem;display:block;align-items:center;margin:-1rem -1rem 0;padding:0 1rem}.x-dialog-portal-content{display:block;margin:0 -1rem;padding:0 1rem;max-height:70vh;overflow:auto;color:var(--x-text-300);font-size:calc(var(--x-font-size) - .0625rem);line-height:1.325rem}.x-dialog-portal-actions{display:flex;align-items:center;justify-content:flex-end;flex-wrap:wrap;box-sizing:content-box;margin:0 -1rem -1rem;padding:0 1rem;height:4rem}.x-dialog-portal-actions[align=center]{justify-content:center}.x-dialog-portal-actions[align=start]{justify-content:flex-start}.x-dialog-portal-actions x-button:not(:first-child){margin-left:1rem}.x-dialog-portal-drag-handle{cursor:move}.x-dialog-portal-fullscreen{margin:0!important}.x-dialog-portal-fullscreen .x-dialog-portal{left:0!important;top:0!important}.x-dialog-portal-fullscreen .x-dialog-portal-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}x-dialog-portal{width:100%;height:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [XMoveBoxAnimation]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogPortalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'x-dialog-portal',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [XMoveBoxAnimation],\n      template: \"<div\\r\\n  class=\\\"x-dialog-portal\\\"\\r\\n  #dragRef\\r\\n  cdkDrag\\r\\n  [cdkDragDisabled]=\\\"!option.draggable && !dialogBox['draggable']\\\"\\r\\n  [cdkDragBoundary]=\\\"'.cdk-overlay-container'\\\"\\r\\n  [cdkDragFreeDragPosition]=\\\"dialogBox['distance']\\\"\\r\\n  [xResizable]=\\\"option.resizable && dialogBox['resizable']!\\\"\\r\\n  (resizing)=\\\"resizing($event)\\\"\\r\\n  (cdkDragEnded)=\\\"onDragEnded($event)\\\"\\r\\n  [offsetLeft]=\\\"offsetLeft\\\"\\r\\n  [offsetTop]=\\\"offsetTop\\\"\\r\\n  [style.minWidth]=\\\"dialogBox['minWidth']\\\"\\r\\n  [style.minHeight]=\\\"dialogBox['minHeight']\\\"\\r\\n>\\r\\n  <ng-template cdkPortalOutlet></ng-template>\\r\\n</div>\\r\\n\",\n      styles: [\".x-dialog-portal{margin:0;padding:0;width:100%;height:100%;display:block;padding:1rem;box-sizing:border-box;min-height:inherit;max-height:inherit;background-color:var(--x-background);box-shadow:var(--x-box-shadow) var(--x-box-shadow-light-color);border:.0625rem solid transparent;border-radius:var(--x-border-radius)}.x-dialog-portal-title{font-weight:600;color:var(--x-text-300);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;height:3rem;line-height:3rem;display:block;align-items:center;margin:-1rem -1rem 0;padding:0 1rem}.x-dialog-portal-content{display:block;margin:0 -1rem;padding:0 1rem;max-height:70vh;overflow:auto;color:var(--x-text-300);font-size:calc(var(--x-font-size) - .0625rem);line-height:1.325rem}.x-dialog-portal-actions{display:flex;align-items:center;justify-content:flex-end;flex-wrap:wrap;box-sizing:content-box;margin:0 -1rem -1rem;padding:0 1rem;height:4rem}.x-dialog-portal-actions[align=center]{justify-content:center}.x-dialog-portal-actions[align=start]{justify-content:flex-start}.x-dialog-portal-actions x-button:not(:first-child){margin-left:1rem}.x-dialog-portal-drag-handle{cursor:move}.x-dialog-portal-fullscreen{margin:0!important}.x-dialog-portal-fullscreen .x-dialog-portal{left:0!important;top:0!important}.x-dialog-portal-fullscreen .x-dialog-portal-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}x-dialog-portal{width:100%;height:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }];\n  }, {\n    placement: [{\n      type: HostBinding,\n      args: ['@x-move-box-animation']\n    }],\n    done: [{\n      type: HostListener,\n      args: ['@x-move-box-animation.done', ['$event']]\n    }],\n    start: [{\n      type: HostListener,\n      args: ['@x-move-box-animation.start', ['$event']]\n    }],\n    portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }],\n    dragRef: [{\n      type: ViewChild,\n      args: [CdkDrag, {\n        static: true\n      }]\n    }],\n    handles: [{\n      type: ContentChildren,\n      args: [CdkDragHandle, {\n        descendants: true\n      }]\n    }]\n  });\n})(); // TODO: add more function\n\n\nclass XDialogRef {\n  constructor(overlayRef, containerInstance, renderer, portalService) {\n    this.overlayRef = overlayRef;\n    this.containerInstance = containerInstance;\n    this.renderer = renderer;\n    this.portalService = portalService;\n    this.fullscreen = false;\n    this.dragHandleRefs = [];\n    this._isFristFullscreen = true;\n  }\n\n  close() {\n    this.containerInstance.animationChanged.pipe(filter(event => event.state === 'void' && event.action === 'done'), take(1)).subscribe(() => {\n      this.overlayRef.detach();\n    });\n    this.containerInstance.placement = 'void';\n  }\n\n  onFullscreen() {\n    let {\n      dialogBox,\n      dialogRef,\n      overlayElement,\n      distance,\n      hostElement,\n      defaultMaximize\n    } = this.containerInstance;\n\n    if (!dialogRef.fullscreen) {\n      dialogRef.overlayRef.updateSize({\n        width: '100%',\n        height: '100%',\n        minWidth: '100%',\n        minHeight: '100%'\n      });\n      dialogRef.fullscreen = true;\n      dialogBox['minWidth'] = '100%';\n      dialogBox['minHeight'] = '100%';\n      dialogBox['draggable'] = false;\n      dialogBox['resizable'] = false;\n\n      if (this.option.resizable) {\n        this.renderer.setStyle(overlayElement, 'margin', '0 0 0 0');\n      }\n\n      if (this.option.draggable) {\n        dialogBox['distance'] = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      this.renderer.addClass(overlayElement, 'x-dialog-portal-fullscreen');\n    } else {\n      dialogBox['minWidth'] = this.option.minWidth;\n      dialogBox['minHeight'] = this.option.minHeight;\n\n      if (this._isFristFullscreen && defaultMaximize) {\n        this.option.draggable = dialogBox['draggable'];\n        this.option.resizable = dialogBox['resizable'];\n      } else {\n        dialogBox['draggable'] = this.option.draggable;\n        dialogBox['resizable'] = this.option.resizable;\n      }\n\n      dialogRef.overlayRef?.updateSize({\n        width: dialogBox['width'],\n        height: dialogBox['height'],\n        minWidth: dialogBox['minWidth'],\n        minHeight: dialogBox['minHeight']\n      });\n      dialogRef.fullscreen = false;\n\n      if (this.option.draggable) {\n        dialogBox['distance'] = { ...distance\n        };\n      }\n\n      if (this.option.resizable) {\n        if (dialogBox['marginTop']) {\n          this.renderer.setStyle(overlayElement, 'margin-top', `${dialogBox['marginTop']}`);\n        }\n\n        if (dialogBox['marginLeft']) {\n          this.renderer.setStyle(overlayElement, 'margin-left', `${dialogBox['marginLeft']}`);\n        }\n\n        if (dialogBox['marginRight']) {\n          this.renderer.setStyle(overlayElement, 'margin-right', `${dialogBox['marginRight']}`);\n        }\n\n        if (dialogBox['marginBottom']) {\n          this.renderer.setStyle(overlayElement, 'margin-bottom', `${dialogBox['marginBottom']}`);\n        }\n      }\n\n      this.renderer.removeClass(overlayElement, 'x-dialog-portal-fullscreen');\n\n      if (this._isFristFullscreen && defaultMaximize) {\n        dialogRef.overlayRef?.updatePositionStrategy(this.portalService.setPlace(this.option.placement, this.option.offset));\n        this.renderer.addClass(hostElement, PortalResizablePrefix);\n        setTimeout(() => {\n          Object.assign(dialogBox, this.portalService.setResizable(overlayElement, this.option.placement));\n          this.containerInstance.offsetLeft = overlayElement.offsetLeft;\n          this.containerInstance.offsetTop = overlayElement.offsetTop;\n          const dialogDraggable = overlayElement?.querySelector('.x-dialog-portal');\n          this.containerInstance.initHeight = dialogDraggable.clientHeight;\n          this.containerInstance.dialogContent = overlayElement?.querySelector('.x-dialog-portal-content');\n          this.containerInstance.initContentHeight = this.containerInstance.dialogContent?.clientHeight;\n          this.containerInstance.dialogBox = dialogBox;\n        });\n      }\n    }\n\n    this._isFristFullscreen = false;\n  }\n\n}\n\nclass XDialogCloseDirective {\n  constructor(dialogRef) {\n    this.dialogRef = dialogRef;\n  }\n\n  onCloseClick() {\n    this.dialogRef && this.dialogRef.close();\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogCloseDirective.ɵfac = function XDialogCloseDirective_Factory(t) {\n  return new (t || XDialogCloseDirective)(i0.ɵɵdirectiveInject(XDialogRef, 8));\n};\n/** @nocollapse */\n\n\nXDialogCloseDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XDialogCloseDirective,\n  selectors: [[\"\", \"x-dialog-close\", \"\"]],\n  hostBindings: function XDialogCloseDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function XDialogCloseDirective_click_HostBindingHandler($event) {\n        return ctx.onCloseClick($event);\n      });\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogCloseDirective, [{\n    type: Directive,\n    args: [{\n      selector: `[x-dialog-close]`\n    }]\n  }], function () {\n    return [{\n      type: XDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    onCloseClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\nclass XDialogTitleDirective {\n  constructor() {\n    this._has = true;\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogTitleDirective.ɵfac = function XDialogTitleDirective_Factory(t) {\n  return new (t || XDialogTitleDirective)();\n};\n/** @nocollapse */\n\n\nXDialogTitleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XDialogTitleDirective,\n  selectors: [[\"\", \"x-dialog-title\", \"\"]],\n  hostVars: 2,\n  hostBindings: function XDialogTitleDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-dialog-portal-title\", ctx._has);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogTitleDirective, [{\n    type: Directive,\n    args: [{\n      selector: `[x-dialog-title]`\n    }]\n  }], null, {\n    _has: [{\n      type: HostBinding,\n      args: ['class.x-dialog-portal-title']\n    }]\n  });\n})();\n\nclass XDialogContentDirective {\n  constructor() {\n    this._has = true;\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogContentDirective.ɵfac = function XDialogContentDirective_Factory(t) {\n  return new (t || XDialogContentDirective)();\n};\n/** @nocollapse */\n\n\nXDialogContentDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XDialogContentDirective,\n  selectors: [[\"\", \"x-dialog-content\", \"\"], [\"x-dialog-content\"]],\n  hostVars: 2,\n  hostBindings: function XDialogContentDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-dialog-portal-content\", ctx._has);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogContentDirective, [{\n    type: Directive,\n    args: [{\n      selector: `[x-dialog-content], x-dialog-content`\n    }]\n  }], null, {\n    _has: [{\n      type: HostBinding,\n      args: ['class.x-dialog-portal-content']\n    }]\n  });\n})();\n\nclass XDialogActionsDirective {\n  constructor() {\n    this._has = true;\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogActionsDirective.ɵfac = function XDialogActionsDirective_Factory(t) {\n  return new (t || XDialogActionsDirective)();\n};\n/** @nocollapse */\n\n\nXDialogActionsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XDialogActionsDirective,\n  selectors: [[\"\", \"x-dialog-actions\", \"\"], [\"x-dialog-actions\"]],\n  hostVars: 2,\n  hostBindings: function XDialogActionsDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-dialog-portal-actions\", ctx._has);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogActionsDirective, [{\n    type: Directive,\n    args: [{\n      selector: `[x-dialog-actions], x-dialog-actions`\n    }]\n  }], null, {\n    _has: [{\n      type: HostBinding,\n      args: ['class.x-dialog-portal-actions']\n    }]\n  });\n})();\n\nclass XDialogDragHandleDirective {\n  constructor(dialogRef, elementRef) {\n    this.dialogRef = dialogRef;\n    this.elementRef = elementRef;\n  }\n\n  get getDraggable() {\n    return !this.dialogRef.fullscreen && this.dialogRef.option.draggable;\n  }\n\n  ngOnInit() {\n    this.dialogRef.dragHandleRefs.push(this.elementRef);\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogDragHandleDirective.ɵfac = function XDialogDragHandleDirective_Factory(t) {\n  return new (t || XDialogDragHandleDirective)(i0.ɵɵdirectiveInject(XDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n/** @nocollapse */\n\n\nXDialogDragHandleDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XDialogDragHandleDirective,\n  selectors: [[\"\", \"x-dialog-drag-handle\", \"\"], [\"x-dialog-drag-handle\"]],\n  hostVars: 2,\n  hostBindings: function XDialogDragHandleDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-dialog-portal-drag-handle\", ctx.getDraggable);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogDragHandleDirective, [{\n    type: Directive,\n    args: [{\n      selector: `[x-dialog-drag-handle], x-dialog-drag-handle`\n    }]\n  }], function () {\n    return [{\n      type: XDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    getDraggable: [{\n      type: HostBinding,\n      args: ['class.x-dialog-portal-drag-handle']\n    }]\n  });\n})();\n\nclass XDialogFullscreenDirective {\n  constructor(dialogRef) {\n    this.dialogRef = dialogRef;\n  }\n\n  onFullscreenClick() {\n    this.dialogRef && this.dialogRef.onFullscreen();\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogFullscreenDirective.ɵfac = function XDialogFullscreenDirective_Factory(t) {\n  return new (t || XDialogFullscreenDirective)(i0.ɵɵdirectiveInject(XDialogRef, 8));\n};\n/** @nocollapse */\n\n\nXDialogFullscreenDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: XDialogFullscreenDirective,\n  selectors: [[\"\", \"x-dialog-fullscreen\", \"\"], [\"x-dialog-fullscreen\"]],\n  hostBindings: function XDialogFullscreenDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function XDialogFullscreenDirective_click_HostBindingHandler($event) {\n        return ctx.onFullscreenClick($event);\n      });\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogFullscreenDirective, [{\n    type: Directive,\n    args: [{\n      selector: `[x-dialog-fullscreen], x-dialog-fullscreen`\n    }]\n  }], function () {\n    return [{\n      type: XDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    onFullscreenClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\nclass XDialogService {\n  constructor(portalService, configService, overlay, rendererFactory) {\n    this.portalService = portalService;\n    this.configService = configService;\n    this.overlay = overlay;\n    this.rendererFactory = rendererFactory;\n    this.default = {\n      placement: 'center',\n      offset: '1rem',\n      width: '32rem',\n      minWidth: '18rem',\n      minHeight: '8rem',\n      backdropClose: true,\n      hasBackdrop: true,\n      draggable: false,\n      resizable: false\n    };\n    this.renderer = this.rendererFactory.createRenderer(null, null);\n    this.configDefault = this.configService.getConfigForComponent(X_DIALOG_CONFIG_NAME);\n    Object.assign(this.default, this.configDefault);\n  }\n\n  create(content, option = {}) {\n    fillDefault(option, this.default);\n    const portal = this.portalService.attach({\n      content: XDialogPortalComponent,\n      viewContainerRef: option.viewContainerRef,\n      overlayConfig: {\n        hasBackdrop: option.hasBackdrop,\n        panelClass: option.className,\n        scrollStrategy: this.overlay.scrollStrategies.block(),\n        width: option.width,\n        height: option.height,\n        minWidth: option.minWidth,\n        minHeight: option.minHeight,\n        positionStrategy: this.portalService.setPlace(option.placement, option.offset)\n      }\n    });\n    const {\n      overlayRef,\n      componentRef\n    } = portal || {};\n    const {\n      instance\n    } = componentRef || {};\n    const {\n      hostElement,\n      overlayElement\n    } = overlayRef || {};\n    const dialogRef = new XDialogRef(overlayRef, instance, this.renderer, this.portalService);\n    let dialogBox = {\n      draggable: option.draggable,\n      resizable: option.resizable\n    };\n    let defaultMaximize = this.setMaximize(option);\n    Object.assign(dialogBox, {\n      width: defaultMaximize ? this.default.width : option.width,\n      height: defaultMaximize ? null : option.height,\n      minWidth: option.minWidth,\n      minHeight: option.minHeight\n    });\n    instance.placement = option.placement;\n    instance.option = option;\n    instance.dialogRef = dialogRef;\n    instance.defaultMaximize = defaultMaximize;\n    instance.dialogBox = dialogBox;\n    instance.hostElement = hostElement;\n    instance.overlayElement = overlayElement;\n    dialogRef.option = option;\n    dialogRef.fullscreen = defaultMaximize;\n\n    if (option.resizable && !defaultMaximize) {\n      this.renderer.addClass(hostElement, PortalResizablePrefix);\n      setTimeout(() => {\n        Object.assign(dialogBox, this.portalService.setResizable(overlayElement, option.placement));\n        instance.offsetLeft = overlayElement.offsetLeft;\n        instance.offsetTop = overlayElement.offsetTop;\n        const dialogDraggable = overlayElement?.querySelector('.x-dialog-portal');\n        instance.initHeight = dialogDraggable.clientHeight;\n        instance.dialogContent = overlayElement?.querySelector('.x-dialog-portal-content');\n        instance.initContentHeight = instance.dialogContent?.clientHeight;\n        instance.dialogBox = dialogBox;\n      });\n    }\n\n    if (defaultMaximize) {\n      this.renderer.addClass(overlayElement, 'x-dialog-portal-fullscreen');\n    }\n\n    if (content instanceof TemplateRef) {\n      instance.attachTemplatePortal(new TemplatePortal(content, option.viewContainerRef, {\n        $implicit: option.data,\n        dialogRef: dialogRef\n      }));\n    } else {\n      const injector = this.portalService.createInjector([{\n        provide: X_DIALOG_DATA,\n        useValue: option.data\n      }, {\n        provide: XDialogRef,\n        useValue: dialogRef\n      }]);\n      const comRef = instance.attachComponentPortal(new ComponentPortal(content, option.viewContainerRef, injector));\n      dialogRef.componentInstance = comRef.instance;\n    }\n\n    if (option.hasBackdrop && option.backdropClose && overlayRef) {\n      overlayRef.backdropClick().subscribe(() => {\n        dialogRef.close();\n      });\n    }\n\n    return dialogRef;\n  }\n\n  setMaximize(option = {}) {\n    const ws = ['100%', '100vw'];\n    const hs = ['100%', '100vh'];\n\n    if (ws.includes(option.width) && hs.includes(option.height)) {\n      option.resizable = false;\n      option.draggable = false;\n      return true;\n    }\n\n    return false;\n  }\n\n}\n/** @nocollapse */\n\n\nXDialogService.ɵfac = function XDialogService_Factory(t) {\n  return new (t || XDialogService)(i0.ɵɵinject(i1.XPortalService), i0.ɵɵinject(i4.XConfigService), i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i0.RendererFactory2));\n};\n/** @nocollapse */\n\n\nXDialogService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: XDialogService,\n  factory: XDialogService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XPortalService\n    }, {\n      type: i4.XConfigService\n    }, {\n      type: i2.Overlay\n    }, {\n      type: i0.RendererFactory2\n    }];\n  }, null);\n})();\n\nclass XDialogModule {}\n/** @nocollapse */\n\n\nXDialogModule.ɵfac = function XDialogModule_Factory(t) {\n  return new (t || XDialogModule)();\n};\n/** @nocollapse */\n\n\nXDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: XDialogModule\n});\n/** @nocollapse */\n\nXDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [XDialogService],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, DragDropModule, XInputModule, XButtonModule, XIconModule, XPortalModule, XAlertModule, XOutletModule, XResizableModule, XI18nModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XDialogModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [XDialogComponent, XDialogContainerComponent, XDialogCloseDirective, XDialogTitleDirective, XDialogContentDirective, XDialogActionsDirective, XDialogDragHandleDirective, XDialogFullscreenDirective, XDialogPortalComponent, XDialogProperty, XDialogContainerProperty],\n      exports: [XDialogComponent, XDialogContainerComponent, XDialogCloseDirective, XDialogTitleDirective, XDialogContentDirective, XDialogActionsDirective, XDialogDragHandleDirective, XDialogFullscreenDirective, XDialogPortalComponent],\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, DragDropModule, XInputModule, XButtonModule, XIconModule, XPortalModule, XAlertModule, XOutletModule, XResizableModule, XI18nModule],\n      providers: [XDialogService]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { XDialogActionsDirective, XDialogCloseDirective, XDialogComponent, XDialogContainer, XDialogContainerComponent, XDialogContainerPrefix, XDialogContainerProperty, XDialogContentDirective, XDialogDragHandleDirective, XDialogFullscreenDirective, XDialogModule, XDialogPortalComponent, XDialogPrefix, XDialogProperty, XDialogRef, XDialogService, XDialogTitleDirective, X_DIALOG_CONFIG_NAME, X_DIALOG_CONTAINER, X_DIALOG_DATA };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Component","Input","Output","ViewEncapsulation","ChangeDetectionStrategy","HostBinding","Optional","Inject","ViewChild","QueryList","HostListener","ContentChildren","Directive","TemplateRef","Injectable","NgModule","i4","XInputBoolean","XWithConfig","XProperty","XIsChange","XClearClass","XIsEmpty","XIsFunction","XMoveBoxAnimation","XOpacityAnimation","fillDefault","__decorate","i7","XAlertProperty","XAlertModule","i1","PortalResizablePrefix","XPortalModule","Subject","filter","take","map","takeUntil","i2","i3","XI18nModule","i5","CommonModule","i6","XButtonModule","i8","XOutletModule","i2$1","BasePortalOutlet","CdkPortalOutlet","TemplatePortal","ComponentPortal","i1$1","CdkDragHandle","CdkDrag","DragDropModule","i3$1","XResizableModule","XIconModule","FormsModule","ReactiveFormsModule","XInputModule","XDialogPrefix","X_DIALOG_CONFIG_NAME","XDialogContainer","X_DIALOG_DATA","XDialogProperty","constructor","arguments","visible","type","cancel","confirm","close","visibleChange","showDone","closeDone","ɵfac","ɵcmp","prototype","args","template","placement","offset","width","height","minWidth","minHeight","effect","footer","showCancel","cancelText","showConfirm","confirmText","backdropClose","hasBackdrop","className","buttonsCenter","draggable","resizable","maximize","beforeClose","XDialogContainerPrefix","X_DIALOG_CONTAINER","XDialogContainerProperty","XDialogContainerComponent","_has","provide","useExisting","selector","encapsulation","None","changeDetection","OnPush","providers","styles","XDialogComponent","renderer","elementRef","cdr","viewContainerRef","protalService","overlay","i18n","configService","container","locale","initHeight","initContentHeight","isMaximize","isDefaultMaximize","dialogBox","contentBox","distance","x","y","viewInit","action","containerInit","_unSubject","scrollStrategy","scrollStrategies","block","getVisible","getCancelText","getConfirmText","getStyle","setContainerStyle","ngOnInit","localeChange","pipe","dialog","subscribe","markForCheck","setClassMap","ngOnChanges","changes","setVisible","ngOnDestroy","unsubscribe","next","ngAfterViewInit","setTimeout","create","backdropClick$","key","classMap","removeClass","nativeElement","addClass","onClose","dialogRef","attach","content","dialogTpl","overlayConfig","panelClass","Boolean","positionStrategy","setPlace","hostElement","overlayElement","overlayRef","setWidthHeight","Object","assign","setResizable","offsetLeft","offsetTop","dialogDraggable","querySelector","clientHeight","dialogContent","backdropClick","ws","hs","includes","portalAttached","hasAttached","execFunction","emit","detach","onDragEnded","$event","onSize","onMaximize","onMinimize","updateSize","setStyle","moveDone","toState","dispose","onResizing","event","contentHeight","Number","direction","Renderer2","ElementRef","ChangeDetectorRef","ViewContainerRef","XPortalService","Overlay","XI18nService","XConfigService","NgIf","NgTemplateOutlet","NgStyle","XButtonComponent","XButtonsComponent","XAlertComponent","XOutletDirective","animations","decorators","static","XDialogPortalComponent","animationChanged","defaultMaximize","done","totalTime","state","start","option","list","dragHandleRefs","length","item","reset","toArray","dragRef","_handles","attachComponentPortal","portal","portalOutlet","Error","attachTemplatePortal","resizing","XResizableDirective","handles","descendants","XDialogRef","containerInstance","portalService","fullscreen","_isFristFullscreen","onFullscreen","updatePositionStrategy","XDialogCloseDirective","onCloseClick","ɵdir","XDialogTitleDirective","XDialogContentDirective","XDialogActionsDirective","XDialogDragHandleDirective","getDraggable","push","XDialogFullscreenDirective","onFullscreenClick","XDialogService","rendererFactory","default","createRenderer","configDefault","getConfigForComponent","componentRef","instance","setMaximize","$implicit","data","injector","createInjector","useValue","comRef","componentInstance","RendererFactory2","ɵprov","XDialogModule","ɵmod","ɵinj","declarations","exports","imports"],"sources":["/Users/lzl/my-angular-app/node_modules/@ng-nest/ui/fesm2020/ng-nest-ui-dialog.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Component, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, Optional, Inject, ViewChild, QueryList, HostListener, ContentChildren, Directive, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport * as i4 from '@ng-nest/ui/core';\nimport { XInputBoolean, XWithConfig, XProperty, XIsChange, XClearClass, XIsEmpty, XIsFunction, XMoveBoxAnimation, XOpacityAnimation, fillDefault } from '@ng-nest/ui/core';\nimport { __decorate } from 'tslib';\nimport * as i7 from '@ng-nest/ui/alert';\nimport { XAlertProperty, XAlertModule } from '@ng-nest/ui/alert';\nimport * as i1 from '@ng-nest/ui/portal';\nimport { PortalResizablePrefix, XPortalModule } from '@ng-nest/ui/portal';\nimport { Subject, filter, take } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i3 from '@ng-nest/ui/i18n';\nimport { XI18nModule } from '@ng-nest/ui/i18n';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@ng-nest/ui/button';\nimport { XButtonModule } from '@ng-nest/ui/button';\nimport * as i8 from '@ng-nest/ui/outlet';\nimport { XOutletModule } from '@ng-nest/ui/outlet';\nimport * as i2$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport * as i1$1 from '@angular/cdk/drag-drop';\nimport { CdkDragHandle, CdkDrag, DragDropModule } from '@angular/cdk/drag-drop';\nimport * as i3$1 from '@ng-nest/ui/resizable';\nimport { XResizableModule } from '@ng-nest/ui/resizable';\nimport { XIconModule } from '@ng-nest/ui/icon';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { XInputModule } from '@ng-nest/ui/input';\n\n/**\r\n * Dialog\r\n * @selector x-dialog\r\n * @decorator component\r\n */\r\nconst XDialogPrefix = 'x-dialog';\r\nconst X_DIALOG_CONFIG_NAME = 'dialog';\r\nconst XDialogContainer = 'x-dialog-overlay';\r\nconst X_DIALOG_DATA = new InjectionToken('XDialogData');\r\n/**\r\n * Dialog Property\r\n */\r\nclass XDialogProperty extends XAlertProperty {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.visible = false;\r\n        /**\r\n         * @zh_CN 类型\r\n         * @en_US Types of\r\n         */\r\n        this.type = 'info';\r\n        /**\r\n         * @zh_CN 取消按钮的事件\r\n         * @en_US Cancel button event\r\n         */\r\n        this.cancel = new EventEmitter();\r\n        /**\r\n         * @zh_CN 确认按钮的事件\r\n         * @en_US Confirm button event\r\n         */\r\n        this.confirm = new EventEmitter();\r\n        /**\r\n         * @zh_CN 确认按钮的事件\r\n         * @en_US Confirm button event\r\n         */\r\n        this.close = new EventEmitter();\r\n        /**\r\n         * @zh_CN 显示/隐藏改变事件\r\n         * @en_US Show/hide change events\r\n         */\r\n        this.visibleChange = new EventEmitter();\r\n        /**\r\n         * @zh_CN 弹出完成动画加载\r\n         * @en_US Pop up complete animation loading\r\n         */\r\n        this.showDone = new EventEmitter();\r\n        /**\r\n         * @zh_CN 关闭完成动画\r\n         * @en_US Close complete animation\r\n         */\r\n        this.closeDone = new EventEmitter();\r\n    }\r\n}\r\n/** @nocollapse */ XDialogProperty.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogProperty, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XDialogProperty.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogProperty, selector: \"ng-component\", inputs: { visible: \"visible\", placement: \"placement\", offset: \"offset\", type: \"type\", width: \"width\", height: \"height\", minWidth: \"minWidth\", minHeight: \"minHeight\", effect: \"effect\", footer: \"footer\", showCancel: \"showCancel\", cancelText: \"cancelText\", showConfirm: \"showConfirm\", confirmText: \"confirmText\", backdropClose: \"backdropClose\", hasBackdrop: \"hasBackdrop\", className: \"className\", buttonsCenter: \"buttonsCenter\", draggable: \"draggable\", resizable: \"resizable\", maximize: \"maximize\", beforeClose: \"beforeClose\" }, outputs: { cancel: \"cancel\", confirm: \"confirm\", close: \"close\", visibleChange: \"visibleChange\", showDone: \"showDone\", closeDone: \"closeDone\" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });\r\n__decorate([\r\n    XInputBoolean()\r\n], XDialogProperty.prototype, \"visible\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, 'center')\r\n], XDialogProperty.prototype, \"placement\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, '1rem')\r\n], XDialogProperty.prototype, \"offset\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, '32rem')\r\n], XDialogProperty.prototype, \"width\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, '18rem')\r\n], XDialogProperty.prototype, \"minWidth\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, '8rem')\r\n], XDialogProperty.prototype, \"minHeight\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, 'white')\r\n], XDialogProperty.prototype, \"effect\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, true)\r\n], XDialogProperty.prototype, \"showCancel\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME)\r\n], XDialogProperty.prototype, \"cancelText\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, true)\r\n], XDialogProperty.prototype, \"showConfirm\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME)\r\n], XDialogProperty.prototype, \"confirmText\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, true)\r\n], XDialogProperty.prototype, \"backdropClose\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, true)\r\n], XDialogProperty.prototype, \"hasBackdrop\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, '')\r\n], XDialogProperty.prototype, \"className\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME),\r\n    XInputBoolean()\r\n], XDialogProperty.prototype, \"buttonsCenter\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, false),\r\n    XInputBoolean()\r\n], XDialogProperty.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, false),\r\n    XInputBoolean()\r\n], XDialogProperty.prototype, \"resizable\", void 0);\r\n__decorate([\r\n    XWithConfig(X_DIALOG_CONFIG_NAME, false),\r\n    XInputBoolean()\r\n], XDialogProperty.prototype, \"maximize\", void 0);\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogProperty, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '' }]\r\n        }], propDecorators: { visible: [{\r\n                type: Input\r\n            }], placement: [{\r\n                type: Input\r\n            }], offset: [{\r\n                type: Input\r\n            }], type: [{\r\n                type: Input\r\n            }], width: [{\r\n                type: Input\r\n            }], height: [{\r\n                type: Input\r\n            }], minWidth: [{\r\n                type: Input\r\n            }], minHeight: [{\r\n                type: Input\r\n            }], effect: [{\r\n                type: Input\r\n            }], footer: [{\r\n                type: Input\r\n            }], showCancel: [{\r\n                type: Input\r\n            }], cancelText: [{\r\n                type: Input\r\n            }], showConfirm: [{\r\n                type: Input\r\n            }], confirmText: [{\r\n                type: Input\r\n            }], backdropClose: [{\r\n                type: Input\r\n            }], hasBackdrop: [{\r\n                type: Input\r\n            }], className: [{\r\n                type: Input\r\n            }], buttonsCenter: [{\r\n                type: Input\r\n            }], draggable: [{\r\n                type: Input\r\n            }], resizable: [{\r\n                type: Input\r\n            }], maximize: [{\r\n                type: Input\r\n            }], beforeClose: [{\r\n                type: Input\r\n            }], cancel: [{\r\n                type: Output\r\n            }], confirm: [{\r\n                type: Output\r\n            }], close: [{\r\n                type: Output\r\n            }], visibleChange: [{\r\n                type: Output\r\n            }], showDone: [{\r\n                type: Output\r\n            }], closeDone: [{\r\n                type: Output\r\n            }] } });\r\n/**\r\n * Dialog Container\r\n * @selector x-dialog-container\r\n * @decorator component\r\n */\r\nconst XDialogContainerPrefix = 'x-dialog-container';\r\nconst X_DIALOG_CONTAINER = new InjectionToken('X_DIALOG_CONTAINER');\r\n/**\r\n * Dialog Container Property\r\n */\r\nclass XDialogContainerProperty extends XProperty {\r\n}\r\n/** @nocollapse */ XDialogContainerProperty.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogContainerProperty, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XDialogContainerProperty.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogContainerProperty, selector: \"ng-component\", usesInheritance: true, ngImport: i0, template: '', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogContainerProperty, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '' }]\r\n        }] });\n\nclass XDialogContainerComponent extends XDialogContainerProperty {\r\n    constructor() {\r\n        super();\r\n        this._has = true;\r\n    }\r\n}\r\n/** @nocollapse */ XDialogContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XDialogContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogContainerComponent, selector: \"x-dialog-container\", host: { properties: { \"class.x-dialog-container\": \"this._has\" } }, providers: [\r\n        {\r\n            provide: X_DIALOG_CONTAINER,\r\n            useExisting: XDialogContainerComponent\r\n        }\r\n    ], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\r\\n\", styles: [\".x-dialog-container{margin:0;padding:0;position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.x-dialog-container x-dialog{display:flex;position:absolute;width:100%;height:100%;z-index:-1;transition:z-index .4s;top:0;left:0}.x-dialog-container .x-dialog{position:absolute;display:block;outline:0;z-index:1001;width:initial;height:initial}.x-dialog-container .x-dialog-top,.x-dialog-container .x-dialog-bottom{justify-content:center}.x-dialog-container .x-dialog-center{justify-content:center;align-items:center}.x-dialog-container .x-dialog-left,.x-dialog-container .x-dialog-right{align-items:center}.x-dialog-container .x-dialog-visible{display:flex;z-index:1000}.x-dialog-container .x-dialog-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;background:rgba(0,0,0,.32)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogContainerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'x-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\r\n                        {\r\n                            provide: X_DIALOG_CONTAINER,\r\n                            useExisting: XDialogContainerComponent\r\n                        }\r\n                    ], template: \"<ng-content></ng-content>\\r\\n\", styles: [\".x-dialog-container{margin:0;padding:0;position:relative;z-index:1;box-sizing:border-box;display:block;overflow:hidden}.x-dialog-container x-dialog{display:flex;position:absolute;width:100%;height:100%;z-index:-1;transition:z-index .4s;top:0;left:0}.x-dialog-container .x-dialog{position:absolute;display:block;outline:0;z-index:1001;width:initial;height:initial}.x-dialog-container .x-dialog-top,.x-dialog-container .x-dialog-bottom{justify-content:center}.x-dialog-container .x-dialog-center{justify-content:center;align-items:center}.x-dialog-container .x-dialog-left,.x-dialog-container .x-dialog-right{align-items:center}.x-dialog-container .x-dialog-visible{display:flex;z-index:1000}.x-dialog-container .x-dialog-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;background:rgba(0,0,0,.32)}\\n\"] }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { _has: [{\r\n                type: HostBinding,\r\n                args: ['class.x-dialog-container']\r\n            }] } });\n\nclass XDialogComponent extends XDialogProperty {\r\n    constructor(renderer, elementRef, cdr, viewContainerRef, protalService, overlay, i18n, configService, container) {\r\n        super();\r\n        this.renderer = renderer;\r\n        this.elementRef = elementRef;\r\n        this.cdr = cdr;\r\n        this.viewContainerRef = viewContainerRef;\r\n        this.protalService = protalService;\r\n        this.overlay = overlay;\r\n        this.i18n = i18n;\r\n        this.configService = configService;\r\n        this.container = container;\r\n        this.locale = {};\r\n        this.initHeight = 0;\r\n        this.initContentHeight = 0;\r\n        this.isMaximize = false;\r\n        this.isDefaultMaximize = false;\r\n        this.dialogBox = {};\r\n        this.contentBox = {};\r\n        this.distance = { x: 0, y: 0 };\r\n        this.viewInit = false;\r\n        this.action = null;\r\n        this.containerInit = false;\r\n        this._unSubject = new Subject();\r\n        this.scrollStrategy = this.protalService.overlay.scrollStrategies.block();\r\n    }\r\n    get getVisible() {\r\n        return this.visible;\r\n    }\r\n    get getCancelText() {\r\n        return this.cancelText || this.locale.cancelText;\r\n    }\r\n    get getConfirmText() {\r\n        return this.confirmText || this.locale.confirmText;\r\n    }\r\n    get getStyle() {\r\n        return this.container\r\n            ? {\r\n                ...this.protalService.setContainerStyle(this.placement, this.offset),\r\n                width: this.width,\r\n                height: this.height,\r\n                minWidth: this.minWidth,\r\n                minHeight: this.minHeight\r\n            }\r\n            : {};\r\n    }\r\n    ngOnInit() {\r\n        this.i18n.localeChange\r\n            .pipe(map((x) => x.dialog), takeUntil(this._unSubject))\r\n            .subscribe((x) => {\r\n            this.locale = x;\r\n            this.cdr.markForCheck();\r\n        });\r\n        this.dialogBox['draggable'] = this.draggable;\r\n        this.dialogBox['resizable'] = this.resizable;\r\n        this.setClassMap();\r\n    }\r\n    ngOnChanges(changes) {\r\n        const { visible, placement } = changes;\r\n        XIsChange(visible) && this.setVisible();\r\n        if (XIsChange(placement)) {\r\n            this.setClassMap();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.unsubscribe();\r\n        this._unSubject.next();\r\n        this._unSubject.unsubscribe();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.viewInit = true;\r\n        setTimeout(() => this.visible && this.create());\r\n    }\r\n    unsubscribe() {\r\n        this.backdropClick$?.unsubscribe();\r\n    }\r\n    setClassMap() {\r\n        for (let key in this.classMap) {\r\n            this.renderer.removeClass(this.elementRef.nativeElement, key);\r\n        }\r\n        XClearClass(this.classMap);\r\n        this.classMap = {\r\n            [`${XDialogPrefix}-${this.placement}`]: !XIsEmpty(this.placement)\r\n        };\r\n        for (let key in this.classMap) {\r\n            this.renderer.addClass(this.elementRef.nativeElement, key);\r\n        }\r\n    }\r\n    setVisible() {\r\n        if (!this.viewInit)\r\n            return;\r\n        if (this.visible) {\r\n            this.create();\r\n        }\r\n        else {\r\n            this.onClose('close', false);\r\n        }\r\n    }\r\n    create() {\r\n        if (this.container) {\r\n            this.containerInit = true;\r\n            return;\r\n        }\r\n        this.dialogRef = this.protalService.attach({\r\n            content: this.dialogTpl,\r\n            viewContainerRef: this.viewContainerRef,\r\n            overlayConfig: {\r\n                panelClass: [XDialogContainer, this.className],\r\n                hasBackdrop: Boolean(this.hasBackdrop),\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                width: this.width,\r\n                height: this.height,\r\n                minWidth: this.minWidth,\r\n                minHeight: this.minHeight,\r\n                positionStrategy: this.protalService.setPlace(this.placement, this.offset)\r\n            }\r\n        });\r\n        const { hostElement, overlayElement } = this.dialogRef.overlayRef;\r\n        this.overlayElement = overlayElement;\r\n        this.setWidthHeight();\r\n        Object.assign(this.dialogBox, {\r\n            width: this.width,\r\n            height: this.height,\r\n            minWidth: this.minWidth,\r\n            minHeight: this.minHeight\r\n        });\r\n        if (this.resizable && !this.isDefaultMaximize) {\r\n            this.renderer.addClass(hostElement, PortalResizablePrefix);\r\n            setTimeout(() => {\r\n                Object.assign(this.dialogBox, this.protalService.setResizable(this.overlayElement, this.placement));\r\n                this.offsetLeft = this.overlayElement.offsetLeft;\r\n                this.offsetTop = this.overlayElement.offsetTop;\r\n                const dialogDraggable = this.overlayElement?.querySelector('.x-alert-draggable');\r\n                this.initHeight = dialogDraggable.clientHeight;\r\n                this.dialogContent = this.overlayElement?.querySelector('.x-dialog-content');\r\n                this.initContentHeight = this.dialogContent.clientHeight;\r\n            });\r\n        }\r\n        if (this.hasBackdrop && this.backdropClose && this.dialogRef?.overlayRef) {\r\n            this.backdropClick$ = this.dialogRef.overlayRef.backdropClick().subscribe(() => this.onClose('close'));\r\n        }\r\n    }\r\n    setWidthHeight() {\r\n        const ws = ['100%', '100vw'];\r\n        const hs = ['100%', '100vh'];\r\n        if (ws.includes(this.width) && hs.includes(this.height)) {\r\n            this.isDefaultMaximize = true;\r\n            this.resizable = false;\r\n            this.draggable = false;\r\n            this.maximize = false;\r\n        }\r\n    }\r\n    portalAttached() {\r\n        return this.dialogRef?.overlayRef?.hasAttached();\r\n    }\r\n    onClose(action, execFunction = true) {\r\n        if (!this.portalAttached() && !this.container)\r\n            return;\r\n        if (this.container && !this.containerInit)\r\n            return;\r\n        if (XIsFunction(this.beforeClose) && execFunction) {\r\n            this.beforeClose(action);\r\n            this.action = action;\r\n        }\r\n        else {\r\n            this.visible = false;\r\n            this.visibleChange.emit(this.visible);\r\n            if (this.portalAttached()) {\r\n                this.dialogRef?.overlayRef?.detach();\r\n                this.unsubscribe();\r\n            }\r\n            if ([action, this.action].includes('confirm')) {\r\n                this.confirm.emit();\r\n            }\r\n            if ([action, this.action].includes('cancel')) {\r\n                this.cancel.emit();\r\n            }\r\n            this.containerInit = false;\r\n            this.action = null;\r\n            this.close.emit();\r\n        }\r\n    }\r\n    onDragEnded($event) {\r\n        this.distance = { x: this.distance.x + $event.distance.x, y: this.distance.y + $event.distance.y };\r\n    }\r\n    onSize() {\r\n        if (!this.dialogRef)\r\n            return;\r\n        this.isMaximize = !this.isMaximize;\r\n        if (this.isMaximize) {\r\n            this.onMaximize();\r\n        }\r\n        else {\r\n            this.onMinimize();\r\n        }\r\n    }\r\n    onMaximize() {\r\n        this.dialogRef.overlayRef?.updateSize({\r\n            width: '100%',\r\n            height: '100%',\r\n            minWidth: '100%',\r\n            minHeight: '100%'\r\n        });\r\n        this.dialogBox['minWidth'] = '100%';\r\n        this.dialogBox['minHeight'] = '100%';\r\n        this.dialogBox['draggable'] = false;\r\n        this.dialogBox['resizable'] = false;\r\n        if (this.resizable) {\r\n            this.renderer.setStyle(this.overlayElement, 'margin', '0 0 0 0');\r\n        }\r\n        if (this.draggable) {\r\n            this.dialogBox['distance'] = { x: 0, y: 0 };\r\n        }\r\n    }\r\n    onMinimize() {\r\n        this.dialogBox['minWidth'] = this.minWidth;\r\n        this.dialogBox['minHeight'] = this.minHeight;\r\n        this.dialogBox['draggable'] = this.draggable;\r\n        this.dialogBox['resizable'] = this.resizable;\r\n        this.dialogRef.overlayRef?.updateSize({\r\n            width: this.dialogBox['width'],\r\n            height: this.dialogBox['height'],\r\n            minWidth: this.dialogBox['minWidth'],\r\n            minHeight: this.dialogBox['minHeight']\r\n        });\r\n        if (this.draggable) {\r\n            this.dialogBox['distance'] = { ...this.distance };\r\n        }\r\n        if (this.resizable) {\r\n            if (this.dialogBox['marginTop']) {\r\n                this.renderer.setStyle(this.overlayElement, 'margin-top', `${this.dialogBox['marginTop']}`);\r\n            }\r\n            if (this.dialogBox['marginLeft']) {\r\n                this.renderer.setStyle(this.overlayElement, 'margin-left', `${this.dialogBox['marginLeft']}`);\r\n            }\r\n            if (this.dialogBox['marginRight']) {\r\n                this.renderer.setStyle(this.overlayElement, 'margin-right', `${this.dialogBox['marginRight']}`);\r\n            }\r\n            if (this.dialogBox['marginBottom']) {\r\n                this.renderer.setStyle(this.overlayElement, 'margin-bottom', `${this.dialogBox['marginBottom']}`);\r\n            }\r\n        }\r\n    }\r\n    moveDone($event) {\r\n        if ($event.toState === 'void') {\r\n            this.closeDone.emit($event);\r\n            this.isMaximize = false;\r\n            this.dialogBox = {\r\n                draggable: this.draggable,\r\n                resizable: this.resizable\r\n            };\r\n            this.distance = { x: 0, y: 0 };\r\n            this.dialogRef?.overlayRef?.dispose();\r\n        }\r\n        else {\r\n            this.showDone.emit($event);\r\n        }\r\n    }\r\n    onResizing(event) {\r\n        const contentHeight = Number(this.initContentHeight) + Number(event.clientHeight) - Number(this.initHeight);\r\n        this.renderer.setStyle(this.dialogContent, 'max-height', 'initial');\r\n        this.renderer.setStyle(this.dialogContent, 'flex', 'initial');\r\n        if (['top-start', 'top-end', 'bottom', 'top', 'bottom-start', 'bottom-end'].includes(event.direction)) {\r\n            this.renderer.setStyle(this.dialogContent, 'height', `${contentHeight}px`);\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ XDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }, { token: i1.XPortalService }, { token: i2.Overlay }, { token: i3.XI18nService }, { token: i4.XConfigService }, { token: X_DIALOG_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogComponent, selector: \"x-dialog\", host: { properties: { \"class.x-dialog-visible\": \"this.getVisible\" } }, viewQueries: [{ propertyName: \"dialogTpl\", first: true, predicate: [\"dialogTpl\"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-template #dialogTpl>\\r\\n  <div class=\\\"x-dialog-backdrop\\\" *ngIf=\\\"container && hasBackdrop\\\" [@x-opacity-animation]=\\\"visible\\\" (click)=\\\"onClose('close')\\\"></div>\\r\\n  <div\\r\\n    class=\\\"x-dialog\\\"\\r\\n    [@x-move-box-animation]=\\\"placement\\\"\\r\\n    (@x-move-box-animation.done)=\\\"moveDone($event)\\\"\\r\\n    [class.x-dialog-maximize]=\\\"isMaximize\\\"\\r\\n    [class.x-dialog-resizable]=\\\"resizable\\\"\\r\\n    [class.x-dialog-default-maximize]=\\\"isDefaultMaximize\\\"\\r\\n    [ngStyle]=\\\"getStyle\\\"\\r\\n  >\\r\\n    <x-alert\\r\\n      [draggable]=\\\"draggable && dialogBox['draggable']\\\"\\r\\n      [resizable]=\\\"resizable && dialogBox['resizable']\\\"\\r\\n      [dragFreeDragPosition]=\\\"dialogBox['distance']\\\"\\r\\n      [offsetLeft]=\\\"offsetLeft\\\"\\r\\n      [offsetTop]=\\\"offsetTop\\\"\\r\\n      [minWidth]=\\\"dialogBox['minWidth']\\\"\\r\\n      [minHeight]=\\\"dialogBox['minHeight']\\\"\\r\\n      [dragBoundary]=\\\"'.cdk-overlay-container'\\\"\\r\\n      [title]=\\\"title\\\"\\r\\n      [content]=\\\"contentTpl\\\"\\r\\n      [type]=\\\"type\\\"\\r\\n      [effect]=\\\"effect\\\"\\r\\n      [hideClose]=\\\"hideClose\\\"\\r\\n      [closeText]=\\\"closeText\\\"\\r\\n      [operationTpl]=\\\"operationTpl\\\"\\r\\n      (close)=\\\"onClose('close')\\\"\\r\\n      (dragEnded)=\\\"onDragEnded($event)\\\"\\r\\n      (resizing)=\\\"onResizing($event)\\\"\\r\\n      showIcon=\\\"false\\\"\\r\\n      duration=\\\"0\\\"\\r\\n      manual\\r\\n      disabledAnimation\\r\\n    ></x-alert>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #contentTpl>\\r\\n  <div class=\\\"x-dialog-inner\\\">\\r\\n    <div class=\\\"x-dialog-content\\\">\\r\\n      <ng-content></ng-content>\\r\\n    </div>\\r\\n    <div class=\\\"x-dialog-buttons\\\" [class.x-dialog-buttons-center]=\\\"buttonsCenter\\\">\\r\\n      <ng-container *xOutlet=\\\"footer\\\">\\r\\n        <x-buttons space=\\\"1\\\" *ngIf=\\\"showCancel || showConfirm\\\">\\r\\n          <x-button *ngIf=\\\"showCancel\\\" (click)=\\\"onClose('cancel')\\\">{{ getCancelText }}</x-button>\\r\\n          <x-button *ngIf=\\\"showConfirm\\\" type=\\\"primary\\\" (click)=\\\"onClose('confirm')\\\">{{ getConfirmText }}</x-button>\\r\\n        </x-buttons>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #operationTpl>\\r\\n  <ng-container *ngIf=\\\"maximize || resizable\\\">\\r\\n    <x-button size=\\\"small\\\" [icon]=\\\"isMaximize ? 'fto-minimize' : 'fto-maximize'\\\" [onlyIcon]=\\\"true\\\" (click)=\\\"onSize()\\\"></x-button>\\r\\n  </ng-container>\\r\\n</ng-template>\\r\\n\\r\\n<ng-container *ngIf=\\\"container && visible\\\">\\r\\n  <ng-container *ngTemplateOutlet=\\\"dialogTpl\\\"></ng-container>\\r\\n</ng-container>\\r\\n\", styles: [\".x-dialog{margin:0;padding:0;width:100%;height:100%}.x-dialog>x-alert{height:100%}.x-dialog>x-alert .x-alert{min-height:100%;height:-moz-fit-content;height:fit-content;align-items:inherit;padding:0}.x-dialog>x-alert .x-alert-inner{min-height:100%;display:flex;flex-direction:column}.x-dialog>x-alert .x-alert-title{padding:1rem 1rem 0}.x-dialog>x-alert .x-alert-content{flex:1;display:flex;flex-direction:column;padding:0 1rem .5rem}.x-dialog-inner{display:flex;flex-direction:column;margin:.5rem 0;flex:1}.x-dialog-buttons{display:flex;justify-content:flex-end}.x-dialog-buttons>x-buttons{margin-top:1rem;align-self:flex-end}.x-dialog-buttons-center{justify-content:center}.x-dialog-content{display:inline-flex;flex-direction:column;flex:1;max-height:70vh;overflow:auto;min-height:2rem}.x-dialog-maximize>x-alert .x-alert{left:0!important;top:0!important}.x-dialog-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}.x-dialog-default-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important;flex:initial}\\n\"], dependencies: [{ kind: \"directive\", type: i5.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i5.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i5.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: i6.XButtonComponent, selector: \"x-button\" }, { kind: \"component\", type: i6.XButtonsComponent, selector: \"x-buttons\" }, { kind: \"component\", type: i7.XAlertComponent, selector: \"x-alert\" }, { kind: \"directive\", type: i8.XOutletDirective, selector: \"[xOutlet]\", inputs: [\"xOutletContext\", \"xOutlet\"] }], animations: [XMoveBoxAnimation, XOpacityAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: `${XDialogPrefix}`, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [XMoveBoxAnimation, XOpacityAnimation], template: \"<ng-template #dialogTpl>\\r\\n  <div class=\\\"x-dialog-backdrop\\\" *ngIf=\\\"container && hasBackdrop\\\" [@x-opacity-animation]=\\\"visible\\\" (click)=\\\"onClose('close')\\\"></div>\\r\\n  <div\\r\\n    class=\\\"x-dialog\\\"\\r\\n    [@x-move-box-animation]=\\\"placement\\\"\\r\\n    (@x-move-box-animation.done)=\\\"moveDone($event)\\\"\\r\\n    [class.x-dialog-maximize]=\\\"isMaximize\\\"\\r\\n    [class.x-dialog-resizable]=\\\"resizable\\\"\\r\\n    [class.x-dialog-default-maximize]=\\\"isDefaultMaximize\\\"\\r\\n    [ngStyle]=\\\"getStyle\\\"\\r\\n  >\\r\\n    <x-alert\\r\\n      [draggable]=\\\"draggable && dialogBox['draggable']\\\"\\r\\n      [resizable]=\\\"resizable && dialogBox['resizable']\\\"\\r\\n      [dragFreeDragPosition]=\\\"dialogBox['distance']\\\"\\r\\n      [offsetLeft]=\\\"offsetLeft\\\"\\r\\n      [offsetTop]=\\\"offsetTop\\\"\\r\\n      [minWidth]=\\\"dialogBox['minWidth']\\\"\\r\\n      [minHeight]=\\\"dialogBox['minHeight']\\\"\\r\\n      [dragBoundary]=\\\"'.cdk-overlay-container'\\\"\\r\\n      [title]=\\\"title\\\"\\r\\n      [content]=\\\"contentTpl\\\"\\r\\n      [type]=\\\"type\\\"\\r\\n      [effect]=\\\"effect\\\"\\r\\n      [hideClose]=\\\"hideClose\\\"\\r\\n      [closeText]=\\\"closeText\\\"\\r\\n      [operationTpl]=\\\"operationTpl\\\"\\r\\n      (close)=\\\"onClose('close')\\\"\\r\\n      (dragEnded)=\\\"onDragEnded($event)\\\"\\r\\n      (resizing)=\\\"onResizing($event)\\\"\\r\\n      showIcon=\\\"false\\\"\\r\\n      duration=\\\"0\\\"\\r\\n      manual\\r\\n      disabledAnimation\\r\\n    ></x-alert>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #contentTpl>\\r\\n  <div class=\\\"x-dialog-inner\\\">\\r\\n    <div class=\\\"x-dialog-content\\\">\\r\\n      <ng-content></ng-content>\\r\\n    </div>\\r\\n    <div class=\\\"x-dialog-buttons\\\" [class.x-dialog-buttons-center]=\\\"buttonsCenter\\\">\\r\\n      <ng-container *xOutlet=\\\"footer\\\">\\r\\n        <x-buttons space=\\\"1\\\" *ngIf=\\\"showCancel || showConfirm\\\">\\r\\n          <x-button *ngIf=\\\"showCancel\\\" (click)=\\\"onClose('cancel')\\\">{{ getCancelText }}</x-button>\\r\\n          <x-button *ngIf=\\\"showConfirm\\\" type=\\\"primary\\\" (click)=\\\"onClose('confirm')\\\">{{ getConfirmText }}</x-button>\\r\\n        </x-buttons>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #operationTpl>\\r\\n  <ng-container *ngIf=\\\"maximize || resizable\\\">\\r\\n    <x-button size=\\\"small\\\" [icon]=\\\"isMaximize ? 'fto-minimize' : 'fto-maximize'\\\" [onlyIcon]=\\\"true\\\" (click)=\\\"onSize()\\\"></x-button>\\r\\n  </ng-container>\\r\\n</ng-template>\\r\\n\\r\\n<ng-container *ngIf=\\\"container && visible\\\">\\r\\n  <ng-container *ngTemplateOutlet=\\\"dialogTpl\\\"></ng-container>\\r\\n</ng-container>\\r\\n\", styles: [\".x-dialog{margin:0;padding:0;width:100%;height:100%}.x-dialog>x-alert{height:100%}.x-dialog>x-alert .x-alert{min-height:100%;height:-moz-fit-content;height:fit-content;align-items:inherit;padding:0}.x-dialog>x-alert .x-alert-inner{min-height:100%;display:flex;flex-direction:column}.x-dialog>x-alert .x-alert-title{padding:1rem 1rem 0}.x-dialog>x-alert .x-alert-content{flex:1;display:flex;flex-direction:column;padding:0 1rem .5rem}.x-dialog-inner{display:flex;flex-direction:column;margin:.5rem 0;flex:1}.x-dialog-buttons{display:flex;justify-content:flex-end}.x-dialog-buttons>x-buttons{margin-top:1rem;align-self:flex-end}.x-dialog-buttons-center{justify-content:center}.x-dialog-content{display:inline-flex;flex-direction:column;flex:1;max-height:70vh;overflow:auto;min-height:2rem}.x-dialog-maximize>x-alert .x-alert{left:0!important;top:0!important}.x-dialog-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}.x-dialog-default-maximize .x-dialog-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important;flex:initial}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }, { type: i1.XPortalService }, { type: i2.Overlay }, { type: i3.XI18nService }, { type: i4.XConfigService }, { type: XDialogContainerComponent, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [X_DIALOG_CONTAINER]\r\n                }] }]; }, propDecorators: { getVisible: [{\r\n                type: HostBinding,\r\n                args: ['class.x-dialog-visible']\r\n            }], dialogTpl: [{\r\n                type: ViewChild,\r\n                args: ['dialogTpl', { static: false }]\r\n            }] } });\n\nclass XDialogPortalComponent extends BasePortalOutlet {\r\n    constructor(renderer) {\r\n        super();\r\n        this.renderer = renderer;\r\n        this.animationChanged = new EventEmitter();\r\n        this.offsetLeft = 0;\r\n        this.offsetTop = 0;\r\n        this.minWidth = '0rem';\r\n        this.minHeight = '0rem';\r\n        this.initHeight = 0;\r\n        this.initContentHeight = 0;\r\n        this.defaultMaximize = false;\r\n        this.distance = { x: 0, y: 0 };\r\n        this.dialogBox = {};\r\n    }\r\n    done({ toState, totalTime }) {\r\n        this.animationChanged.next({ action: 'done', state: toState, totalTime });\r\n    }\r\n    start({ toState, totalTime }) {\r\n        this.animationChanged.next({ action: 'start', state: toState, totalTime });\r\n    }\r\n    ngOnInit() {\r\n        this.dialogBox['draggable'] = this.defaultMaximize ? this.dialogBox['draggable'] : this.option.draggable;\r\n        this.dialogBox['resizable'] = this.defaultMaximize ? this.dialogBox['resizable'] : this.option.resizable;\r\n    }\r\n    ngAfterViewInit() {\r\n        let list = new QueryList();\r\n        if (this.dialogRef.dragHandleRefs.length === 0) {\r\n            this.dialogBox['draggable'] = false;\r\n            this.option.draggable = false;\r\n            return;\r\n        }\r\n        for (let item of this.dialogRef.dragHandleRefs) {\r\n            list.reset([...list.toArray(), new CdkDragHandle(item, this.dragRef)]);\r\n        }\r\n        this.dragRef._handles = list;\r\n    }\r\n    attachComponentPortal(portal) {\r\n        if (this.portalOutlet.hasAttached()) {\r\n            throw Error('dialog portal has attached');\r\n        }\r\n        return this.portalOutlet.attachComponentPortal(portal);\r\n    }\r\n    attachTemplatePortal(portal) {\r\n        if (this.portalOutlet.hasAttached()) {\r\n            throw Error('dialog portal has attached');\r\n        }\r\n        return this.portalOutlet.attachTemplatePortal(portal);\r\n    }\r\n    resizing(event) {\r\n        const contentHeight = Number(this.initContentHeight) + Number(event.clientHeight) - Number(this.initHeight);\r\n        this.renderer.setStyle(this.dialogContent, 'max-height', 'initial');\r\n        this.renderer.setStyle(this.dialogContent, 'flex', 'initial');\r\n        if (['top-start', 'top-end', 'bottom', 'top', 'bottom-start', 'bottom-end'].includes(event.direction)) {\r\n            this.renderer.setStyle(this.dialogContent, 'height', `${contentHeight}px`);\r\n        }\r\n    }\r\n    onDragEnded(event) {\r\n        this.distance = { x: this.distance.x + event.distance.x, y: this.distance.y + event.distance.y };\r\n    }\r\n}\r\n/** @nocollapse */ XDialogPortalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogPortalComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XDialogPortalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogPortalComponent, selector: \"x-dialog-portal\", host: { listeners: { \"@x-move-box-animation.done\": \"done($event)\", \"@x-move-box-animation.start\": \"start($event)\" }, properties: { \"@x-move-box-animation\": \"this.placement\" } }, queries: [{ propertyName: \"handles\", predicate: CdkDragHandle, descendants: true }], viewQueries: [{ propertyName: \"portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: \"dragRef\", first: true, predicate: CdkDrag, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div\\r\\n  class=\\\"x-dialog-portal\\\"\\r\\n  #dragRef\\r\\n  cdkDrag\\r\\n  [cdkDragDisabled]=\\\"!option.draggable && !dialogBox['draggable']\\\"\\r\\n  [cdkDragBoundary]=\\\"'.cdk-overlay-container'\\\"\\r\\n  [cdkDragFreeDragPosition]=\\\"dialogBox['distance']\\\"\\r\\n  [xResizable]=\\\"option.resizable && dialogBox['resizable']!\\\"\\r\\n  (resizing)=\\\"resizing($event)\\\"\\r\\n  (cdkDragEnded)=\\\"onDragEnded($event)\\\"\\r\\n  [offsetLeft]=\\\"offsetLeft\\\"\\r\\n  [offsetTop]=\\\"offsetTop\\\"\\r\\n  [style.minWidth]=\\\"dialogBox['minWidth']\\\"\\r\\n  [style.minHeight]=\\\"dialogBox['minHeight']\\\"\\r\\n>\\r\\n  <ng-template cdkPortalOutlet></ng-template>\\r\\n</div>\\r\\n\", styles: [\".x-dialog-portal{margin:0;padding:0;width:100%;height:100%;display:block;padding:1rem;box-sizing:border-box;min-height:inherit;max-height:inherit;background-color:var(--x-background);box-shadow:var(--x-box-shadow) var(--x-box-shadow-light-color);border:.0625rem solid transparent;border-radius:var(--x-border-radius)}.x-dialog-portal-title{font-weight:600;color:var(--x-text-300);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;height:3rem;line-height:3rem;display:block;align-items:center;margin:-1rem -1rem 0;padding:0 1rem}.x-dialog-portal-content{display:block;margin:0 -1rem;padding:0 1rem;max-height:70vh;overflow:auto;color:var(--x-text-300);font-size:calc(var(--x-font-size) - .0625rem);line-height:1.325rem}.x-dialog-portal-actions{display:flex;align-items:center;justify-content:flex-end;flex-wrap:wrap;box-sizing:content-box;margin:0 -1rem -1rem;padding:0 1rem;height:4rem}.x-dialog-portal-actions[align=center]{justify-content:center}.x-dialog-portal-actions[align=start]{justify-content:flex-start}.x-dialog-portal-actions x-button:not(:first-child){margin-left:1rem}.x-dialog-portal-drag-handle{cursor:move}.x-dialog-portal-fullscreen{margin:0!important}.x-dialog-portal-fullscreen .x-dialog-portal{left:0!important;top:0!important}.x-dialog-portal-fullscreen .x-dialog-portal-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}x-dialog-portal{width:100%;height:100%}\\n\"], dependencies: [{ kind: \"directive\", type: i1$1.CdkDrag, selector: \"[cdkDrag]\", inputs: [\"cdkDragData\", \"cdkDragLockAxis\", \"cdkDragRootElement\", \"cdkDragBoundary\", \"cdkDragStartDelay\", \"cdkDragFreeDragPosition\", \"cdkDragDisabled\", \"cdkDragConstrainPosition\", \"cdkDragPreviewClass\", \"cdkDragPreviewContainer\"], outputs: [\"cdkDragStarted\", \"cdkDragReleased\", \"cdkDragEnded\", \"cdkDragEntered\", \"cdkDragExited\", \"cdkDragDropped\", \"cdkDragMoved\"], exportAs: [\"cdkDrag\"] }, { kind: \"directive\", type: i2$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }, { kind: \"directive\", type: i3$1.XResizableDirective, selector: \"[xResizable]\" }], animations: [XMoveBoxAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogPortalComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'x-dialog-portal', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [XMoveBoxAnimation], template: \"<div\\r\\n  class=\\\"x-dialog-portal\\\"\\r\\n  #dragRef\\r\\n  cdkDrag\\r\\n  [cdkDragDisabled]=\\\"!option.draggable && !dialogBox['draggable']\\\"\\r\\n  [cdkDragBoundary]=\\\"'.cdk-overlay-container'\\\"\\r\\n  [cdkDragFreeDragPosition]=\\\"dialogBox['distance']\\\"\\r\\n  [xResizable]=\\\"option.resizable && dialogBox['resizable']!\\\"\\r\\n  (resizing)=\\\"resizing($event)\\\"\\r\\n  (cdkDragEnded)=\\\"onDragEnded($event)\\\"\\r\\n  [offsetLeft]=\\\"offsetLeft\\\"\\r\\n  [offsetTop]=\\\"offsetTop\\\"\\r\\n  [style.minWidth]=\\\"dialogBox['minWidth']\\\"\\r\\n  [style.minHeight]=\\\"dialogBox['minHeight']\\\"\\r\\n>\\r\\n  <ng-template cdkPortalOutlet></ng-template>\\r\\n</div>\\r\\n\", styles: [\".x-dialog-portal{margin:0;padding:0;width:100%;height:100%;display:block;padding:1rem;box-sizing:border-box;min-height:inherit;max-height:inherit;background-color:var(--x-background);box-shadow:var(--x-box-shadow) var(--x-box-shadow-light-color);border:.0625rem solid transparent;border-radius:var(--x-border-radius)}.x-dialog-portal-title{font-weight:600;color:var(--x-text-300);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;height:3rem;line-height:3rem;display:block;align-items:center;margin:-1rem -1rem 0;padding:0 1rem}.x-dialog-portal-content{display:block;margin:0 -1rem;padding:0 1rem;max-height:70vh;overflow:auto;color:var(--x-text-300);font-size:calc(var(--x-font-size) - .0625rem);line-height:1.325rem}.x-dialog-portal-actions{display:flex;align-items:center;justify-content:flex-end;flex-wrap:wrap;box-sizing:content-box;margin:0 -1rem -1rem;padding:0 1rem;height:4rem}.x-dialog-portal-actions[align=center]{justify-content:center}.x-dialog-portal-actions[align=start]{justify-content:flex-start}.x-dialog-portal-actions x-button:not(:first-child){margin-left:1rem}.x-dialog-portal-drag-handle{cursor:move}.x-dialog-portal-fullscreen{margin:0!important}.x-dialog-portal-fullscreen .x-dialog-portal{left:0!important;top:0!important}.x-dialog-portal-fullscreen .x-dialog-portal-content{max-height:calc(100vh - 7rem)!important;height:calc(100vh - 7rem)!important}x-dialog-portal{width:100%;height:100%}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { placement: [{\r\n                type: HostBinding,\r\n                args: ['@x-move-box-animation']\r\n            }], done: [{\r\n                type: HostListener,\r\n                args: ['@x-move-box-animation.done', ['$event']]\r\n            }], start: [{\r\n                type: HostListener,\r\n                args: ['@x-move-box-animation.start', ['$event']]\r\n            }], portalOutlet: [{\r\n                type: ViewChild,\r\n                args: [CdkPortalOutlet, { static: true }]\r\n            }], dragRef: [{\r\n                type: ViewChild,\r\n                args: [CdkDrag, { static: true }]\r\n            }], handles: [{\r\n                type: ContentChildren,\r\n                args: [CdkDragHandle, { descendants: true }]\r\n            }] } });\n\n// TODO: add more function\r\nclass XDialogRef {\r\n    constructor(overlayRef, containerInstance, renderer, portalService) {\r\n        this.overlayRef = overlayRef;\r\n        this.containerInstance = containerInstance;\r\n        this.renderer = renderer;\r\n        this.portalService = portalService;\r\n        this.fullscreen = false;\r\n        this.dragHandleRefs = [];\r\n        this._isFristFullscreen = true;\r\n    }\r\n    close() {\r\n        this.containerInstance.animationChanged\r\n            .pipe(filter((event) => event.state === 'void' && event.action === 'done'), take(1))\r\n            .subscribe(() => {\r\n            this.overlayRef.detach();\r\n        });\r\n        this.containerInstance.placement = 'void';\r\n    }\r\n    onFullscreen() {\r\n        let { dialogBox, dialogRef, overlayElement, distance, hostElement, defaultMaximize } = this.containerInstance;\r\n        if (!dialogRef.fullscreen) {\r\n            dialogRef.overlayRef.updateSize({\r\n                width: '100%',\r\n                height: '100%',\r\n                minWidth: '100%',\r\n                minHeight: '100%'\r\n            });\r\n            dialogRef.fullscreen = true;\r\n            dialogBox['minWidth'] = '100%';\r\n            dialogBox['minHeight'] = '100%';\r\n            dialogBox['draggable'] = false;\r\n            dialogBox['resizable'] = false;\r\n            if (this.option.resizable) {\r\n                this.renderer.setStyle(overlayElement, 'margin', '0 0 0 0');\r\n            }\r\n            if (this.option.draggable) {\r\n                dialogBox['distance'] = { x: 0, y: 0 };\r\n            }\r\n            this.renderer.addClass(overlayElement, 'x-dialog-portal-fullscreen');\r\n        }\r\n        else {\r\n            dialogBox['minWidth'] = this.option.minWidth;\r\n            dialogBox['minHeight'] = this.option.minHeight;\r\n            if (this._isFristFullscreen && defaultMaximize) {\r\n                this.option.draggable = dialogBox['draggable'];\r\n                this.option.resizable = dialogBox['resizable'];\r\n            }\r\n            else {\r\n                dialogBox['draggable'] = this.option.draggable;\r\n                dialogBox['resizable'] = this.option.resizable;\r\n            }\r\n            dialogRef.overlayRef?.updateSize({\r\n                width: dialogBox['width'],\r\n                height: dialogBox['height'],\r\n                minWidth: dialogBox['minWidth'],\r\n                minHeight: dialogBox['minHeight']\r\n            });\r\n            dialogRef.fullscreen = false;\r\n            if (this.option.draggable) {\r\n                dialogBox['distance'] = { ...distance };\r\n            }\r\n            if (this.option.resizable) {\r\n                if (dialogBox['marginTop']) {\r\n                    this.renderer.setStyle(overlayElement, 'margin-top', `${dialogBox['marginTop']}`);\r\n                }\r\n                if (dialogBox['marginLeft']) {\r\n                    this.renderer.setStyle(overlayElement, 'margin-left', `${dialogBox['marginLeft']}`);\r\n                }\r\n                if (dialogBox['marginRight']) {\r\n                    this.renderer.setStyle(overlayElement, 'margin-right', `${dialogBox['marginRight']}`);\r\n                }\r\n                if (dialogBox['marginBottom']) {\r\n                    this.renderer.setStyle(overlayElement, 'margin-bottom', `${dialogBox['marginBottom']}`);\r\n                }\r\n            }\r\n            this.renderer.removeClass(overlayElement, 'x-dialog-portal-fullscreen');\r\n            if (this._isFristFullscreen && defaultMaximize) {\r\n                dialogRef.overlayRef?.updatePositionStrategy(this.portalService.setPlace(this.option.placement, this.option.offset));\r\n                this.renderer.addClass(hostElement, PortalResizablePrefix);\r\n                setTimeout(() => {\r\n                    Object.assign(dialogBox, this.portalService.setResizable(overlayElement, this.option.placement));\r\n                    this.containerInstance.offsetLeft = overlayElement.offsetLeft;\r\n                    this.containerInstance.offsetTop = overlayElement.offsetTop;\r\n                    const dialogDraggable = overlayElement?.querySelector('.x-dialog-portal');\r\n                    this.containerInstance.initHeight = dialogDraggable.clientHeight;\r\n                    this.containerInstance.dialogContent = overlayElement?.querySelector('.x-dialog-portal-content');\r\n                    this.containerInstance.initContentHeight = this.containerInstance.dialogContent?.clientHeight;\r\n                    this.containerInstance.dialogBox = dialogBox;\r\n                });\r\n            }\r\n        }\r\n        this._isFristFullscreen = false;\r\n    }\r\n}\n\nclass XDialogCloseDirective {\r\n    constructor(dialogRef) {\r\n        this.dialogRef = dialogRef;\r\n    }\r\n    onCloseClick() {\r\n        this.dialogRef && this.dialogRef.close();\r\n    }\r\n}\r\n/** @nocollapse */ XDialogCloseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogCloseDirective, deps: [{ token: XDialogRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XDialogCloseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogCloseDirective, selector: \"[x-dialog-close]\", host: { listeners: { \"click\": \"onCloseClick($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogCloseDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[x-dialog-close]`\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: XDialogRef, decorators: [{\r\n                    type: Optional\r\n                }] }]; }, propDecorators: { onCloseClick: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }] } });\r\nclass XDialogTitleDirective {\r\n    constructor() {\r\n        this._has = true;\r\n    }\r\n}\r\n/** @nocollapse */ XDialogTitleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XDialogTitleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogTitleDirective, selector: \"[x-dialog-title]\", host: { properties: { \"class.x-dialog-portal-title\": \"this._has\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogTitleDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[x-dialog-title]`\r\n                }]\r\n        }], propDecorators: { _has: [{\r\n                type: HostBinding,\r\n                args: ['class.x-dialog-portal-title']\r\n            }] } });\r\nclass XDialogContentDirective {\r\n    constructor() {\r\n        this._has = true;\r\n    }\r\n}\r\n/** @nocollapse */ XDialogContentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XDialogContentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogContentDirective, selector: \"[x-dialog-content], x-dialog-content\", host: { properties: { \"class.x-dialog-portal-content\": \"this._has\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogContentDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[x-dialog-content], x-dialog-content`\r\n                }]\r\n        }], propDecorators: { _has: [{\r\n                type: HostBinding,\r\n                args: ['class.x-dialog-portal-content']\r\n            }] } });\r\nclass XDialogActionsDirective {\r\n    constructor() {\r\n        this._has = true;\r\n    }\r\n}\r\n/** @nocollapse */ XDialogActionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogActionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XDialogActionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogActionsDirective, selector: \"[x-dialog-actions], x-dialog-actions\", host: { properties: { \"class.x-dialog-portal-actions\": \"this._has\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogActionsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[x-dialog-actions], x-dialog-actions`\r\n                }]\r\n        }], propDecorators: { _has: [{\r\n                type: HostBinding,\r\n                args: ['class.x-dialog-portal-actions']\r\n            }] } });\r\nclass XDialogDragHandleDirective {\r\n    constructor(dialogRef, elementRef) {\r\n        this.dialogRef = dialogRef;\r\n        this.elementRef = elementRef;\r\n    }\r\n    get getDraggable() {\r\n        return !this.dialogRef.fullscreen && this.dialogRef.option.draggable;\r\n    }\r\n    ngOnInit() {\r\n        this.dialogRef.dragHandleRefs.push(this.elementRef);\r\n    }\r\n}\r\n/** @nocollapse */ XDialogDragHandleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogDragHandleDirective, deps: [{ token: XDialogRef, optional: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XDialogDragHandleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogDragHandleDirective, selector: \"[x-dialog-drag-handle], x-dialog-drag-handle\", host: { properties: { \"class.x-dialog-portal-drag-handle\": \"this.getDraggable\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogDragHandleDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[x-dialog-drag-handle], x-dialog-drag-handle`\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: XDialogRef, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i0.ElementRef }]; }, propDecorators: { getDraggable: [{\r\n                type: HostBinding,\r\n                args: ['class.x-dialog-portal-drag-handle']\r\n            }] } });\r\nclass XDialogFullscreenDirective {\r\n    constructor(dialogRef) {\r\n        this.dialogRef = dialogRef;\r\n    }\r\n    onFullscreenClick() {\r\n        this.dialogRef && this.dialogRef.onFullscreen();\r\n    }\r\n}\r\n/** @nocollapse */ XDialogFullscreenDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogFullscreenDirective, deps: [{ token: XDialogRef, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\n/** @nocollapse */ XDialogFullscreenDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XDialogFullscreenDirective, selector: \"[x-dialog-fullscreen], x-dialog-fullscreen\", host: { listeners: { \"click\": \"onFullscreenClick($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogFullscreenDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[x-dialog-fullscreen], x-dialog-fullscreen`\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: XDialogRef, decorators: [{\r\n                    type: Optional\r\n                }] }]; }, propDecorators: { onFullscreenClick: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }] } });\n\nclass XDialogService {\r\n    constructor(portalService, configService, overlay, rendererFactory) {\r\n        this.portalService = portalService;\r\n        this.configService = configService;\r\n        this.overlay = overlay;\r\n        this.rendererFactory = rendererFactory;\r\n        this.default = {\r\n            placement: 'center',\r\n            offset: '1rem',\r\n            width: '32rem',\r\n            minWidth: '18rem',\r\n            minHeight: '8rem',\r\n            backdropClose: true,\r\n            hasBackdrop: true,\r\n            draggable: false,\r\n            resizable: false\r\n        };\r\n        this.renderer = this.rendererFactory.createRenderer(null, null);\r\n        this.configDefault = this.configService.getConfigForComponent(X_DIALOG_CONFIG_NAME);\r\n        Object.assign(this.default, this.configDefault);\r\n    }\r\n    create(content, option = {}) {\r\n        fillDefault(option, this.default);\r\n        const portal = this.portalService.attach({\r\n            content: XDialogPortalComponent,\r\n            viewContainerRef: option.viewContainerRef,\r\n            overlayConfig: {\r\n                hasBackdrop: option.hasBackdrop,\r\n                panelClass: option.className,\r\n                scrollStrategy: this.overlay.scrollStrategies.block(),\r\n                width: option.width,\r\n                height: option.height,\r\n                minWidth: option.minWidth,\r\n                minHeight: option.minHeight,\r\n                positionStrategy: this.portalService.setPlace(option.placement, option.offset)\r\n            }\r\n        });\r\n        const { overlayRef, componentRef } = portal || {};\r\n        const { instance } = componentRef || {};\r\n        const { hostElement, overlayElement } = overlayRef || {};\r\n        const dialogRef = new XDialogRef(overlayRef, instance, this.renderer, this.portalService);\r\n        let dialogBox = {\r\n            draggable: option.draggable,\r\n            resizable: option.resizable\r\n        };\r\n        let defaultMaximize = this.setMaximize(option);\r\n        Object.assign(dialogBox, {\r\n            width: defaultMaximize ? this.default.width : option.width,\r\n            height: defaultMaximize ? null : option.height,\r\n            minWidth: option.minWidth,\r\n            minHeight: option.minHeight\r\n        });\r\n        instance.placement = option.placement;\r\n        instance.option = option;\r\n        instance.dialogRef = dialogRef;\r\n        instance.defaultMaximize = defaultMaximize;\r\n        instance.dialogBox = dialogBox;\r\n        instance.hostElement = hostElement;\r\n        instance.overlayElement = overlayElement;\r\n        dialogRef.option = option;\r\n        dialogRef.fullscreen = defaultMaximize;\r\n        if (option.resizable && !defaultMaximize) {\r\n            this.renderer.addClass(hostElement, PortalResizablePrefix);\r\n            setTimeout(() => {\r\n                Object.assign(dialogBox, this.portalService.setResizable(overlayElement, option.placement));\r\n                instance.offsetLeft = overlayElement.offsetLeft;\r\n                instance.offsetTop = overlayElement.offsetTop;\r\n                const dialogDraggable = overlayElement?.querySelector('.x-dialog-portal');\r\n                instance.initHeight = dialogDraggable.clientHeight;\r\n                instance.dialogContent = overlayElement?.querySelector('.x-dialog-portal-content');\r\n                instance.initContentHeight = instance.dialogContent?.clientHeight;\r\n                instance.dialogBox = dialogBox;\r\n            });\r\n        }\r\n        if (defaultMaximize) {\r\n            this.renderer.addClass(overlayElement, 'x-dialog-portal-fullscreen');\r\n        }\r\n        if (content instanceof TemplateRef) {\r\n            instance.attachTemplatePortal(new TemplatePortal(content, option.viewContainerRef, { $implicit: option.data, dialogRef: dialogRef }));\r\n        }\r\n        else {\r\n            const injector = this.portalService.createInjector([\r\n                { provide: X_DIALOG_DATA, useValue: option.data },\r\n                { provide: XDialogRef, useValue: dialogRef }\r\n            ]);\r\n            const comRef = instance.attachComponentPortal(new ComponentPortal(content, option.viewContainerRef, injector));\r\n            dialogRef.componentInstance = comRef.instance;\r\n        }\r\n        if (option.hasBackdrop && option.backdropClose && overlayRef) {\r\n            overlayRef.backdropClick().subscribe(() => {\r\n                dialogRef.close();\r\n            });\r\n        }\r\n        return dialogRef;\r\n    }\r\n    setMaximize(option = {}) {\r\n        const ws = ['100%', '100vw'];\r\n        const hs = ['100%', '100vh'];\r\n        if (ws.includes(option.width) && hs.includes(option.height)) {\r\n            option.resizable = false;\r\n            option.draggable = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/** @nocollapse */ XDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogService, deps: [{ token: i1.XPortalService }, { token: i4.XConfigService }, { token: i2.Overlay }, { token: i0.RendererFactory2 }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ XDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.XPortalService }, { type: i4.XConfigService }, { type: i2.Overlay }, { type: i0.RendererFactory2 }]; } });\n\nclass XDialogModule {\r\n}\r\n/** @nocollapse */ XDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ XDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogModule, declarations: [XDialogComponent,\r\n        XDialogContainerComponent,\r\n        XDialogCloseDirective,\r\n        XDialogTitleDirective,\r\n        XDialogContentDirective,\r\n        XDialogActionsDirective,\r\n        XDialogDragHandleDirective,\r\n        XDialogFullscreenDirective,\r\n        XDialogPortalComponent,\r\n        XDialogProperty,\r\n        XDialogContainerProperty], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        DragDropModule,\r\n        XInputModule,\r\n        XButtonModule,\r\n        XIconModule,\r\n        XPortalModule,\r\n        XAlertModule,\r\n        XOutletModule,\r\n        XResizableModule,\r\n        XI18nModule], exports: [XDialogComponent,\r\n        XDialogContainerComponent,\r\n        XDialogCloseDirective,\r\n        XDialogTitleDirective,\r\n        XDialogContentDirective,\r\n        XDialogActionsDirective,\r\n        XDialogDragHandleDirective,\r\n        XDialogFullscreenDirective,\r\n        XDialogPortalComponent] });\r\n/** @nocollapse */ XDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogModule, providers: [XDialogService], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        DragDropModule,\r\n        XInputModule,\r\n        XButtonModule,\r\n        XIconModule,\r\n        XPortalModule,\r\n        XAlertModule,\r\n        XOutletModule,\r\n        XResizableModule,\r\n        XI18nModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XDialogModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        XDialogComponent,\r\n                        XDialogContainerComponent,\r\n                        XDialogCloseDirective,\r\n                        XDialogTitleDirective,\r\n                        XDialogContentDirective,\r\n                        XDialogActionsDirective,\r\n                        XDialogDragHandleDirective,\r\n                        XDialogFullscreenDirective,\r\n                        XDialogPortalComponent,\r\n                        XDialogProperty,\r\n                        XDialogContainerProperty\r\n                    ],\r\n                    exports: [\r\n                        XDialogComponent,\r\n                        XDialogContainerComponent,\r\n                        XDialogCloseDirective,\r\n                        XDialogTitleDirective,\r\n                        XDialogContentDirective,\r\n                        XDialogActionsDirective,\r\n                        XDialogDragHandleDirective,\r\n                        XDialogFullscreenDirective,\r\n                        XDialogPortalComponent\r\n                    ],\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule,\r\n                        DragDropModule,\r\n                        XInputModule,\r\n                        XButtonModule,\r\n                        XIconModule,\r\n                        XPortalModule,\r\n                        XAlertModule,\r\n                        XOutletModule,\r\n                        XResizableModule,\r\n                        XI18nModule\r\n                    ],\r\n                    providers: [XDialogService]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { XDialogActionsDirective, XDialogCloseDirective, XDialogComponent, XDialogContainer, XDialogContainerComponent, XDialogContainerPrefix, XDialogContainerProperty, XDialogContentDirective, XDialogDragHandleDirective, XDialogFullscreenDirective, XDialogModule, XDialogPortalComponent, XDialogPrefix, XDialogProperty, XDialogRef, XDialogService, XDialogTitleDirective, X_DIALOG_CONFIG_NAME, X_DIALOG_CONTAINER, X_DIALOG_DATA };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}