{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, ViewChild, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ng-nest/ui/core';\nimport { XProperty, XDataConvert, XInputBoolean, XInputNumber, XWithConfig, XIsEmpty, XIsChange, XIsObservable, XSetData, XIsFunction, XIsUndefined } from '@ng-nest/ui/core';\nimport { Subject, map } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ng-nest/ui/icon';\nimport { XIconModule } from '@ng-nest/ui/icon';\nimport * as i4$1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i5 from '@ng-nest/ui/checkbox';\nimport { XCheckboxModule } from '@ng-nest/ui/checkbox';\nimport * as i6 from '@ng-nest/ui/outlet';\nimport { XOutletModule } from '@ng-nest/ui/outlet';\nimport * as i7 from '@ng-nest/ui/link';\nimport { XLinkModule } from '@ng-nest/ui/link';\n/**\r\n * Tree\r\n * @selector x-tree\r\n * @decorator component\r\n */\n\nfunction XTreeNodeComponent_x_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"x-icon\", 9);\n    i0.ɵɵlistener(\"click\", function XTreeNodeComponent_x_icon_1_Template_x_icon_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(!ctx_r8.tree.nodeOpen && ctx_r8.tree.onToggle($event, ctx_r8.node));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"is-leaf\", !ctx_r0.node.leaf)(\"is-open\", ctx_r0.node.open);\n  }\n}\n\nfunction XTreeNodeComponent_x_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"x-icon\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"spin\", ctx_r1.node.loading);\n  }\n}\n\nconst _c0 = function (a1) {\n  return {\n    label: \"\",\n    id: a1\n  };\n};\n\nconst _c1 = function (a0) {\n  return [a0];\n};\n\nfunction XTreeNodeComponent_x_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"x-checkbox\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function XTreeNodeComponent_x_checkbox_3_Template_x_checkbox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.node.checked = $event);\n    })(\"ngModelChange\", function XTreeNodeComponent_x_checkbox_3_Template_x_checkbox_ngModelChange_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onCheckboxChange());\n    })(\"click\", function XTreeNodeComponent_x_checkbox_3_Template_x_checkbox_click_0_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", i0.ɵɵpureFunction1(6, _c1, i0.ɵɵpureFunction1(4, _c0, ctx_r2.node.id)))(\"ngModel\", ctx_r2.node.checked)(\"indeterminate\", ctx_r2.node.indeterminate)(\"disabled\", ctx_r2.getNodeDisabled(ctx_r2.node.disabled));\n  }\n}\n\nfunction XTreeNodeComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"nowrap\", ctx_r3.node.nowrap === false || ctx_r3.node.nowrap === true ? ctx_r3.node.nowrap : ctx_r3.nodeNowrap);\n    i0.ɵɵproperty(\"title\", ctx_r3.node.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.node.label);\n  }\n}\n\nfunction XTreeNodeComponent_ng_template_5_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c2 = function (a0) {\n  return {\n    $node: a0\n  };\n};\n\nfunction XTreeNodeComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, XTreeNodeComponent_ng_template_5_ng_container_0_Template, 1, 0, \"ng-container\", 13);\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xOutlet\", ctx_r5.tree.labelTpl)(\"xOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r5.node));\n  }\n}\n\nfunction XTreeNodeComponent_x_link_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"x-link\", 14);\n    i0.ɵɵlistener(\"click\", function XTreeNodeComponent_x_link_8_Template_x_link_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const action_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.onAction($event, action_r15, ctx_r16.node));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const action_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"icon\", action_r15.icon)(\"title\", action_r15.label);\n  }\n}\n\nfunction XTreeNodeComponent_ul_9_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"li\", 17);\n  }\n\n  if (rf & 2) {\n    const child_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"node\", child_r19)(\"parent\", ctx_r18)(\"lazy\", ctx_r18.lazy)(\"lazyData\", ctx_r18.lazyData)(\"nodeHeight\", ctx_r18.nodeHeight)(\"nodeNowrap\", ctx_r18.nodeNowrap)(\"nodeAlignItems\", ctx_r18.nodeAlignItems)(\"tree\", ctx_r18.tree);\n  }\n}\n\nfunction XTreeNodeComponent_ul_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 15);\n    i0.ɵɵtemplate(1, XTreeNodeComponent_ul_9_li_1_Template, 1, 8, \"li\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", !ctx_r7.node.open);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.node.children)(\"ngForTrackBy\", ctx_r7.trackByItem);\n  }\n}\n\nconst _c3 = [\"tree\"];\n\nfunction XTreeComponent_ul_2_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"li\", 6);\n  }\n\n  if (rf & 2) {\n    const node_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"node\", node_r6)(\"lazy\", ctx_r5.lazy)(\"lazyData\", ctx_r5.data)(\"nodeHeight\", ctx_r5.nodeHeight)(\"nodeNowrap\", ctx_r5.nodeNowrap)(\"nodeAlignItems\", ctx_r5.nodeAlignItems)(\"tree\", ctx_r5);\n  }\n}\n\nfunction XTreeComponent_ul_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵtemplate(1, XTreeComponent_ul_2_li_1_Template, 1, 7, \"li\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nodes)(\"ngForTrackBy\", ctx_r1.trackByItem);\n  }\n}\n\nfunction XTreeComponent_ng_template_3_x_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"x-tree-node\", 9);\n  }\n\n  if (rf & 2) {\n    const node_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"node\", node_r8)(\"lazy\", ctx_r7.lazy)(\"lazyData\", ctx_r7.data)(\"nodeHeight\", ctx_r7.nodeHeight)(\"nodeNowrap\", ctx_r7.nodeNowrap)(\"nodeAlignItems\", ctx_r7.nodeAlignItems)(\"tree\", ctx_r7)(\"virtualScroll\", ctx_r7.virtualScroll);\n  }\n}\n\nfunction XTreeComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 7);\n    i0.ɵɵtemplate(1, XTreeComponent_ng_template_3_x_tree_node_1_Template, 1, 8, \"x-tree-node\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r3.virtualScrollHeight, \"px\");\n    i0.ɵɵproperty(\"itemSize\", ctx_r3.itemSize)(\"minBufferPx\", ctx_r3.minBufferPx)(\"maxBufferPx\", ctx_r3.maxBufferPx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r3.nodes)(\"cdkVirtualForTemplateCacheSize\", 0)(\"cdkVirtualForTrackBy\", ctx_r3.trackByItem);\n  }\n}\n\nfunction XTreeComponent_x_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"x-icon\", 10);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵstyleProp(\"display\", \"none\");\n  }\n}\n\nconst XTreePrefix = 'x-tree';\nconst X_CONFIG_NAME = 'tree';\n/**\r\n * Tree Property\r\n */\n\nclass XTreeProperty extends XProperty {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * @zh_CN 节点数据\r\n     * @en_US Node data\r\n     */\n\n    this.data = [];\n    /**\r\n     * @zh_CN 展开的节点\r\n     * @en_US Expanded node\r\n     */\n\n    this.expanded = [];\n    /**\r\n     * @zh_CN checkbox 选中的节点\r\n     * @en_US Checkbox selected node\r\n     */\n\n    this.checked = [];\n    /**\r\n     * @zh_CN 默认展开的层级\r\n     * @en_US Default expanded level\r\n     */\n\n    this.expandedLevel = -1;\n    /**\r\n     * @zh_CN 当前点击选中的节点变化的事件\r\n     * @en_US The event of the currently clicked node change\r\n     */\n\n    this.activatedChange = new EventEmitter();\n    /**\r\n     * @zh_CN 使用 checkedbox 选中变化的事件\r\n     * @en_US Use checkedbox to select changed events\r\n     */\n\n    this.checkboxChange = new EventEmitter();\n    /**\r\n     * @zh_CN 如果 data 是函数类型，可以通过此参数控制请求，常用于弹框中的表格，弹出后再请求\r\n     * @en_US If data is a function type, you can use this parameter to control the request, which is often used in the form in the pop-up box, and then request it after it pops up\r\n     */\n\n    this.manual = true;\n    /**\r\n     * @zh_CN checkbox 状态改变触发层级检查\r\n     * @en_US Checkbox status changes trigger level checks\r\n     */\n\n    this.levelCheck = true;\n    /**\r\n     * @zh_CN 节点内容不换行显示省略号\r\n     * @en_US Show ellipsis without wrapping\r\n     */\n\n    this.nodeNowrap = true;\n    /**\r\n     * @zh_CN 树节点操作按钮\r\n     * @en_US Tree node operation buttons\r\n     */\n\n    this.actions = [];\n    /**\r\n     * @zh_CN 超出可视窗口缓冲区的最小值，对应 cdk scroll 中的参数，开启虚拟滚动才生效\r\n     * @en_US Exceed the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll\r\n     */\n\n    this.minBufferPx = 100;\n    /**\r\n     * @zh_CN 渲染新数据缓冲区的像素，对应 cdk scroll 中的参数，开启虚拟滚动才生效\r\n     * @en_US Render the pixels of the new data buffer, corresponding to the parameters in cdk scroll\r\n     */\n\n    this.maxBufferPx = 200;\n    /**\r\n     * @zh_CN 参数控制请求改变事件\r\n     * @en_US Parameter control request change event\r\n     */\n\n    this.manualChange = new EventEmitter();\n  }\n\n}\n/** @nocollapse */\n\n\nXTreeProperty.ɵfac = /* @__PURE__ */function () {\n  let ɵXTreeProperty_BaseFactory;\n  return function XTreeProperty_Factory(t) {\n    return (ɵXTreeProperty_BaseFactory || (ɵXTreeProperty_BaseFactory = i0.ɵɵgetInheritedFactory(XTreeProperty)))(t || XTreeProperty);\n  };\n}();\n/** @nocollapse */\n\n\nXTreeProperty.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XTreeProperty,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    data: \"data\",\n    checkbox: \"checkbox\",\n    lazy: \"lazy\",\n    activatedId: \"activatedId\",\n    expanded: \"expanded\",\n    checked: \"checked\",\n    expandedAll: \"expandedAll\",\n    expandedLevel: \"expandedLevel\",\n    nodeOpen: \"nodeOpen\",\n    spacing: \"spacing\",\n    labelTpl: \"labelTpl\",\n    nodeHeight: \"nodeHeight\",\n    allowManyActivated: \"allowManyActivated\",\n    manual: \"manual\",\n    levelCheck: \"levelCheck\",\n    nodeNowrap: \"nodeNowrap\",\n    nodeAlignItems: \"nodeAlignItems\",\n    actions: \"actions\",\n    virtualScroll: \"virtualScroll\",\n    virtualScrollHeight: \"virtualScrollHeight\",\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  outputs: {\n    activatedChange: \"activatedChange\",\n    checkboxChange: \"checkboxChange\",\n    manualChange: \"manualChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function XTreeProperty_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n__decorate([XDataConvert()], XTreeProperty.prototype, \"data\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"checkbox\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"lazy\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"expandedAll\", void 0);\n\n__decorate([XInputNumber()], XTreeProperty.prototype, \"expandedLevel\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"nodeOpen\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME, 0.875), XInputNumber()], XTreeProperty.prototype, \"spacing\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME, 0), XInputNumber()], XTreeProperty.prototype, \"nodeHeight\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"allowManyActivated\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"manual\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"levelCheck\", void 0);\n\n__decorate([XInputBoolean()], XTreeProperty.prototype, \"nodeNowrap\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME, 'center')], XTreeProperty.prototype, \"nodeAlignItems\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME), XInputBoolean()], XTreeProperty.prototype, \"virtualScroll\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME, 400), XInputNumber()], XTreeProperty.prototype, \"virtualScrollHeight\", void 0);\n\n__decorate([XWithConfig(X_CONFIG_NAME, 26), XInputNumber()], XTreeProperty.prototype, \"itemSize\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XTreeProperty, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    checkbox: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    activatedId: [{\n      type: Input\n    }],\n    expanded: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    expandedAll: [{\n      type: Input\n    }],\n    expandedLevel: [{\n      type: Input\n    }],\n    nodeOpen: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    labelTpl: [{\n      type: Input\n    }],\n    nodeHeight: [{\n      type: Input\n    }],\n    allowManyActivated: [{\n      type: Input\n    }],\n    activatedChange: [{\n      type: Output\n    }],\n    checkboxChange: [{\n      type: Output\n    }],\n    manual: [{\n      type: Input\n    }],\n    levelCheck: [{\n      type: Input\n    }],\n    nodeNowrap: [{\n      type: Input\n    }],\n    nodeAlignItems: [{\n      type: Input\n    }],\n    actions: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    virtualScrollHeight: [{\n      type: Input\n    }],\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }],\n    manualChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\r\n * TreeNode\r\n * @selector x-tree-node\r\n * @decorator directive\r\n */\n\n\nconst XTreeNodePrefix = 'x-tree-node';\n/**\r\n * TreeNode Property\r\n */\n\nclass XTreeNodeProperty extends XProperty {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * @zh_CN 节点数据\r\n     * @en_US Node data\r\n     */\n\n    this.node = {};\n    /**\r\n     * @zh_CN 节点的高度，单位 rem\r\n     * @en_US The height of the node in rem\r\n     */\n\n    this.nodeHeight = 0;\n    /**\r\n     * @zh_CN 节点垂直对齐方式\r\n     * @en_US Show ellipsis without wrapping\r\n     */\n\n    this.nodeAlignItems = 'center';\n  }\n\n}\n/** @nocollapse */\n\n\nXTreeNodeProperty.ɵfac = /* @__PURE__ */function () {\n  let ɵXTreeNodeProperty_BaseFactory;\n  return function XTreeNodeProperty_Factory(t) {\n    return (ɵXTreeNodeProperty_BaseFactory || (ɵXTreeNodeProperty_BaseFactory = i0.ɵɵgetInheritedFactory(XTreeNodeProperty)))(t || XTreeNodeProperty);\n  };\n}();\n/** @nocollapse */\n\n\nXTreeNodeProperty.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XTreeNodeProperty,\n  selectors: [[\"ng-component\"]],\n  inputs: {\n    node: \"node\",\n    level: \"level\",\n    lazy: \"lazy\",\n    nodeHeight: \"nodeHeight\",\n    nodeNowrap: \"nodeNowrap\",\n    nodeAlignItems: \"nodeAlignItems\",\n    lazyData: \"lazyData\",\n    virtualScroll: \"virtualScroll\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function XTreeNodeProperty_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n__decorate([XInputBoolean()], XTreeNodeProperty.prototype, \"lazy\", void 0);\n\n__decorate([XInputNumber()], XTreeNodeProperty.prototype, \"nodeHeight\", void 0);\n\n__decorate([XInputBoolean()], XTreeNodeProperty.prototype, \"nodeNowrap\", void 0);\n\n__decorate([XInputBoolean()], XTreeNodeProperty.prototype, \"virtualScroll\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XTreeNodeProperty, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }],\n    level: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    nodeHeight: [{\n      type: Input\n    }],\n    nodeNowrap: [{\n      type: Input\n    }],\n    nodeAlignItems: [{\n      type: Input\n    }],\n    lazyData: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }]\n  });\n})();\n\nclass XTreeNodeComponent extends XTreeNodeProperty {\n  constructor( // @Optional() public tree: XTreeComponent,\n  renderer, elementRef, cdr, configService) {\n    super();\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.configService = configService;\n    this.rootClass = true;\n    this._loading = false;\n  }\n\n  get loading() {\n    return this._loading;\n  }\n\n  set loading(value) {\n    this._loading = value;\n    this.cdr.detectChanges();\n  }\n\n  get paddingLeft() {\n    return Number(this.node?.level ? this.node.level : 0) * Number(this.tree.spacing);\n  }\n\n  ngOnInit() {\n    this.node.change = check => {\n      if (check) this.setCheckbox();\n      this.cdr.detectChanges();\n    };\n\n    this.level = this.node?.level ? this.node.level : 0;\n    if (!this.tree.levelCheck) return;\n    if (this.node.checked) this.setCheckbox();\n    this.setIndeterminate(this.node);\n  }\n\n  onActivate(event, node) {\n    const change = this.tree.activatedNode?.change;\n    this.tree.nodeOpen && node.leaf && this.tree.onToggle(event, node);\n\n    if (this.tree.activatedNode) {\n      if (this.tree.activatedNode.id === node.id && !this.tree.allowManyActivated) return;\n    }\n\n    this.tree.activatedNode = node;\n    this.tree.activatedChange.emit(node);\n    change && change();\n    event.stopPropagation();\n    this.cdr.detectChanges();\n  }\n\n  onCheckboxChange() {\n    this.setCheckbox();\n    this.tree.checkboxChange.emit(this.node);\n  }\n\n  setCheckbox() {\n    if (!this.tree.levelCheck) return;\n    this.node.indeterminate = this.node.checked;\n    this.node.children && this.setChildrenCheckbox(this.node.checked);\n\n    if (this.virtualScroll) {\n      const setParent = node => {\n        let parent = this.tree.nodes.find(x => x.id === node.pid);\n        if (!parent || XIsEmpty(parent.children)) return;\n        let checkedList = parent.children?.filter(y => y.checked);\n        let indeterminateList = parent.children?.filter(y => y.indeterminate);\n        parent.checked = checkedList?.length === parent.children?.length;\n        parent.indeterminate = checkedList.length > 0 || indeterminateList.length > 0;\n        parent.change && parent.change();\n        setParent(parent);\n      };\n\n      setParent(this.node);\n    } else {\n      this.parent?.setParentCheckbox();\n    }\n  }\n\n  setChildrenCheckbox(checked) {\n    const setChildren = (children, isChecked) => {\n      if (XIsEmpty(children)) return;\n\n      for (let x of children) {\n        if (x.disabled) continue;\n        x.checked = isChecked;\n        x.indeterminate = isChecked;\n        x.change && x.change();\n        setChildren(x.children, isChecked);\n      }\n    };\n\n    setChildren(this.node.children, checked);\n    this.cdr.detectChanges();\n  }\n\n  setParentCheckbox() {\n    if (XIsEmpty(this.node.children)) return;\n    let checkedList = this.node.children?.filter(x => x.checked);\n    let indeterminateList = this.node.children?.filter(x => x.indeterminate);\n    this.node.checked = checkedList?.length === this.node.children?.length;\n    this.node.indeterminate = checkedList.length > 0 || indeterminateList.length > 0;\n    this.parent?.setParentCheckbox();\n    this.cdr.detectChanges();\n  }\n\n  setIndeterminate(node) {\n    const getChildren = children => {\n      if (XIsEmpty(children)) return;\n      children.forEach(x => {\n        if (x.indeterminate || x.checked) {\n          node.indeterminate = true;\n          return;\n        }\n\n        getChildren(x.children);\n      });\n    };\n\n    getChildren(node.children);\n    this.cdr.detectChanges();\n  }\n\n  getNodeDisabled(disabled) {\n    return disabled;\n  }\n\n  onAction(event, action, node) {\n    action.handler && action.handler(node);\n    event.stopPropagation();\n  }\n\n  trackByItem(_index, item) {\n    return item.id;\n  }\n\n}\n/** @nocollapse */\n\n\nXTreeNodeComponent.ɵfac = function XTreeNodeComponent_Factory(t) {\n  return new (t || XTreeNodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.XConfigService));\n};\n/** @nocollapse */\n\n\nXTreeNodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XTreeNodeComponent,\n  selectors: [[\"x-tree-node\"], [\"\", \"x-tree-node\", \"\"]],\n  hostVars: 2,\n  hostBindings: function XTreeNodeComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"x-tree-node\", ctx.rootClass);\n    }\n  },\n  inputs: {\n    parent: \"parent\",\n    tree: \"tree\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 16,\n  consts: [[1, \"x-tree-node-content\", 3, \"click\"], [\"type\", \"fto-chevron-right\", 3, \"is-leaf\", \"is-open\", \"click\", 4, \"ngIf\"], [\"type\", \"fto-loader\", 3, \"spin\", 4, \"ngIf\"], [3, \"data\", \"ngModel\", \"indeterminate\", \"disabled\", \"ngModelChange\", \"click\", 4, \"ngIf\"], [\"class\", \"x-tree-node-label\", 3, \"nowrap\", \"title\", 4, \"ngIf\", \"ngIfElse\"], [\"labelTpl\", \"\"], [1, \"x-tree-node-operations\"], [3, \"icon\", \"title\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"hidden\", 4, \"ngIf\"], [\"type\", \"fto-chevron-right\", 3, \"click\"], [\"type\", \"fto-loader\", 3, \"spin\"], [3, \"data\", \"ngModel\", \"indeterminate\", \"disabled\", \"ngModelChange\", \"click\"], [1, \"x-tree-node-label\", 3, \"title\"], [4, \"xOutlet\", \"xOutletContext\"], [3, \"icon\", \"title\", \"click\"], [3, \"hidden\"], [\"x-tree-node\", \"\", 3, \"node\", \"parent\", \"lazy\", \"lazyData\", \"nodeHeight\", \"nodeNowrap\", \"nodeAlignItems\", \"tree\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"x-tree-node\", \"\", 3, \"node\", \"parent\", \"lazy\", \"lazyData\", \"nodeHeight\", \"nodeNowrap\", \"nodeAlignItems\", \"tree\"]],\n  template: function XTreeNodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function XTreeNodeComponent_Template_div_click_0_listener($event) {\n        return ctx.onActivate($event, ctx.node);\n      });\n      i0.ɵɵtemplate(1, XTreeNodeComponent_x_icon_1_Template, 1, 4, \"x-icon\", 1);\n      i0.ɵɵtemplate(2, XTreeNodeComponent_x_icon_2_Template, 1, 1, \"x-icon\", 2);\n      i0.ɵɵtemplate(3, XTreeNodeComponent_x_checkbox_3_Template, 1, 8, \"x-checkbox\", 3);\n      i0.ɵɵtemplate(4, XTreeNodeComponent_span_4_Template, 2, 4, \"span\", 4);\n      i0.ɵɵtemplate(5, XTreeNodeComponent_ng_template_5_Template, 1, 4, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(7, \"span\", 6);\n      i0.ɵɵtemplate(8, XTreeNodeComponent_x_link_8_Template, 1, 2, \"x-link\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(9, XTreeNodeComponent_ul_9_Template, 2, 3, \"ul\", 8);\n    }\n\n    if (rf & 2) {\n      const _r4 = i0.ɵɵreference(6);\n\n      i0.ɵɵstyleProp(\"padding-left\", ctx.paddingLeft, \"rem\")(\"height\", ctx.node.height ? ctx.node.height : ctx.nodeHeight ? ctx.nodeHeight : \"\", \"rem\")(\"align-items\", ctx.node.alignItems ? ctx.node.alignItems : ctx.nodeAlignItems);\n      i0.ɵɵclassProp(\"x-activated\", (ctx.tree.activatedNode == null ? null : ctx.tree.activatedNode.id) === ctx.node.id);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.node.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.node.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tree.checkbox);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tree.labelTpl)(\"ngIfElse\", _r4);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tree.actions)(\"ngForTrackBy\", ctx.trackByItem);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.virtualScroll && (ctx.node.childrenLoaded || ctx.node.leaf && ctx.node.open));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.NgControlStatus, i3.NgModel, i4.XIconComponent, i5.XCheckboxComponent, i6.XOutletDirective, i7.XLinkComponent, XTreeNodeComponent],\n  styles: [\".x-tree-node{margin:0;padding:0}.x-tree-node-content{display:flex;padding:.0625rem 0;cursor:pointer}.x-tree-node-content x-icon{padding:.25rem;color:var(--x-text-400);font-size:1rem;margin-right:.125rem;transition:var(--x-animation-duration-base)}.x-tree-node-content x-icon.is-leaf{visibility:hidden}.x-tree-node-content x-icon.is-open{transform:rotate(90deg)}.x-tree-node-content x-icon:hover{color:var(--x-text-300)}.x-tree-node-content x-checkbox{margin-right:.325rem;padding:.25rem 0}.x-tree-node-content:hover,.x-tree-node-content.x-activated{background-color:var(--x-background-a100)}.x-tree-node-content:hover .x-tree-node-label,.x-tree-node-content.x-activated .x-tree-node-label{color:var(--x-primary)}.x-tree-node-content:hover .x-tree-node-operations{display:flex;align-items:center}.x-tree-node-operations{display:none}.x-tree-node-operations .x-link{padding:0 .125rem}.x-tree-node-label{flex:1;-webkit-user-select:none;user-select:none}.x-tree-node-label.nowrap{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XTreeNodeComponent, [{\n    type: Component,\n    args: [{\n      selector: `${XTreeNodePrefix}, [${XTreeNodePrefix}]`,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div\\r\\n  class=\\\"x-tree-node-content\\\"\\r\\n  [class.x-activated]=\\\"tree.activatedNode?.id === node.id\\\"\\r\\n  [style.padding-left.rem]=\\\"paddingLeft\\\"\\r\\n  [style.height.rem]=\\\"node.height ? node.height : nodeHeight ? nodeHeight : ''\\\"\\r\\n  [style.align-items]=\\\"node.alignItems ? node.alignItems : nodeAlignItems\\\"\\r\\n  (click)=\\\"onActivate($event, node)\\\"\\r\\n>\\r\\n  <x-icon\\r\\n    *ngIf=\\\"!node.loading\\\"\\r\\n    [class.is-leaf]=\\\"!node.leaf\\\"\\r\\n    [class.is-open]=\\\"node.open\\\"\\r\\n    type=\\\"fto-chevron-right\\\"\\r\\n    (click)=\\\"!tree.nodeOpen && tree.onToggle($event, node)\\\"\\r\\n  ></x-icon>\\r\\n  <x-icon *ngIf=\\\"node.loading\\\" type=\\\"fto-loader\\\" [spin]=\\\"node.loading\\\"></x-icon>\\r\\n  <x-checkbox\\r\\n    *ngIf=\\\"tree.checkbox\\\"\\r\\n    [data]=\\\"[{ label: '', id: node.id }]\\\"\\r\\n    [(ngModel)]=\\\"node.checked\\\"\\r\\n    (ngModelChange)=\\\"onCheckboxChange()\\\"\\r\\n    [indeterminate]=\\\"node.indeterminate\\\"\\r\\n    [disabled]=\\\"getNodeDisabled(node.disabled)\\\"\\r\\n    (click)=\\\"$event.stopPropagation()\\\"\\r\\n  ></x-checkbox>\\r\\n  <span\\r\\n    class=\\\"x-tree-node-label\\\"\\r\\n    [class.nowrap]=\\\"node.nowrap === false || node.nowrap === true ? node.nowrap : nodeNowrap\\\"\\r\\n    [title]=\\\"node.label\\\"\\r\\n    *ngIf=\\\"!tree.labelTpl; else labelTpl\\\"\\r\\n    >{{ node.label }}</span\\r\\n  >\\r\\n  <ng-template #labelTpl>\\r\\n    <ng-container *xOutlet=\\\"tree.labelTpl; context: { $node: node }\\\"></ng-container>\\r\\n  </ng-template>\\r\\n  <span class=\\\"x-tree-node-operations\\\">\\r\\n    <x-link\\r\\n      *ngFor=\\\"let action of tree.actions; trackBy: trackByItem\\\"\\r\\n      [icon]=\\\"action.icon\\\"\\r\\n      [title]=\\\"action.label\\\"\\r\\n      (click)=\\\"onAction($event, action, node)\\\"\\r\\n    ></x-link>\\r\\n  </span>\\r\\n</div>\\r\\n<ul *ngIf=\\\"!virtualScroll && (node.childrenLoaded || (node.leaf && node.open))\\\" [hidden]=\\\"!node.open\\\">\\r\\n  <li\\r\\n    x-tree-node\\r\\n    *ngFor=\\\"let child of node.children; trackBy: trackByItem\\\"\\r\\n    [node]=\\\"child\\\"\\r\\n    [parent]=\\\"this\\\"\\r\\n    [lazy]=\\\"lazy\\\"\\r\\n    [lazyData]=\\\"lazyData\\\"\\r\\n    [nodeHeight]=\\\"nodeHeight\\\"\\r\\n    [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n    [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n    [tree]=\\\"tree\\\"\\r\\n  ></li>\\r\\n</ul>\\r\\n\",\n      styles: [\".x-tree-node{margin:0;padding:0}.x-tree-node-content{display:flex;padding:.0625rem 0;cursor:pointer}.x-tree-node-content x-icon{padding:.25rem;color:var(--x-text-400);font-size:1rem;margin-right:.125rem;transition:var(--x-animation-duration-base)}.x-tree-node-content x-icon.is-leaf{visibility:hidden}.x-tree-node-content x-icon.is-open{transform:rotate(90deg)}.x-tree-node-content x-icon:hover{color:var(--x-text-300)}.x-tree-node-content x-checkbox{margin-right:.325rem;padding:.25rem 0}.x-tree-node-content:hover,.x-tree-node-content.x-activated{background-color:var(--x-background-a100)}.x-tree-node-content:hover .x-tree-node-label,.x-tree-node-content.x-activated .x-tree-node-label{color:var(--x-primary)}.x-tree-node-content:hover .x-tree-node-operations{display:flex;align-items:center}.x-tree-node-operations{display:none}.x-tree-node-operations .x-link{padding:0 .125rem}.x-tree-node-label{flex:1;-webkit-user-select:none;user-select:none}.x-tree-node-label.nowrap{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.XConfigService\n    }];\n  }, {\n    parent: [{\n      type: Input\n    }],\n    tree: [{\n      type: Input\n    }],\n    rootClass: [{\n      type: HostBinding,\n      args: ['class.x-tree-node']\n    }]\n  });\n})();\n\nclass XTreeComponent extends XTreeProperty {\n  constructor(renderer, elementRef, cdr, configService) {\n    super();\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.cdr = cdr;\n    this.configService = configService;\n    this.nodes = [];\n    this.virtualNodes = [];\n    this.dataIsFunc = false;\n    this.getting = false;\n    this.treeData = [];\n    this._unSubject = new Subject();\n  }\n\n  ngOnChanges(changes) {\n    const {\n      expandedAll,\n      data,\n      activatedId,\n      checked,\n      manual\n    } = changes;\n    XIsChange(data) && this.setData();\n    XIsChange(expandedAll) && this.setExpandedAll();\n    XIsChange(activatedId) && this.setActivatedNode(this.treeData);\n    XIsChange(checked) && this.setCheckedKeys(this.checked);\n    XIsChange(manual) && this.setManual();\n  }\n\n  ngOnDestroy() {\n    this._unSubject.next();\n\n    this._unSubject.unsubscribe();\n  }\n\n  setData() {\n    if (typeof this.data === 'undefined') return;\n    this.dataIsFunc = false;\n\n    if (XIsObservable(this.data)) {\n      XSetData(this.data, this._unSubject).subscribe(x => {\n        this.setDataChange(x);\n      });\n    } else if (XIsFunction(this.data)) {\n      this.dataIsFunc = true;\n      this.getDataByFunc();\n    } else {\n      this.setDataChange(this.data);\n    }\n  }\n\n  setManual() {\n    if (this.dataIsFunc) this.getDataByFunc();\n  }\n\n  getDataByFunc() {\n    if (!this.manual) return;\n    XSetData(this.data(), this._unSubject).subscribe(x => {\n      this.setDataChange(x);\n    });\n  }\n\n  setDataChange(value) {\n    !XIsEmpty(this.activatedId) && this.setActivatedNode(value);\n\n    const getChildren = (node, level) => {\n      node.level = level;\n      node.open = Boolean(this.expandedAll) || level <= this.expandedLevel || this.expanded.indexOf(node.id) >= 0;\n      node.checked = this.checked.indexOf(node.id) >= 0;\n      node.childrenLoaded = node.open;\n      if (XIsUndefined(node.children)) node.children = value.filter(y => y.pid === node.id);\n      if (XIsUndefined(node.leaf)) node.leaf = node.children?.length > 0;\n      if (node.leaf) node.children?.map(y => getChildren(y, level + 1));\n      return node;\n    };\n\n    this.treeData = value;\n    this.nodes = value.filter(x => XIsEmpty(x.pid)).map(x => getChildren(x, 0));\n    this.cdr.detectChanges();\n  }\n\n  getCheckedNodes() {\n    let result = [];\n\n    const getChildren = nodes => {\n      if (XIsEmpty(nodes)) return;\n      nodes.forEach(x => {\n        if (x.checked && !result.includes(x)) {\n          result = [...result, x];\n        }\n\n        getChildren(x.children);\n      });\n    };\n\n    getChildren(this.nodes);\n    return result;\n  }\n\n  getCheckedKeys() {\n    return this.getCheckedNodes().map(x => x.id);\n  }\n\n  setCheckedKeys(keys = []) {\n    const setChildren = (nodes, clear = false) => {\n      if (XIsEmpty(nodes)) return;\n      nodes.forEach(x => {\n        x.checked = !clear && keys.indexOf(x.id) >= 0;\n        x.change && x.change(true);\n        setChildren(x.children, clear);\n      });\n    };\n\n    setChildren(this.nodes, keys.length === 0);\n    this.cdr.detectChanges();\n  }\n\n  setExpandedAll() {\n    const setChildren = nodes => {\n      if (XIsEmpty(nodes)) return;\n      nodes.forEach(x => {\n        x.open = Boolean(this.expandedAll);\n        x.change && x.change();\n        setChildren(x.children);\n      });\n    };\n\n    setChildren(this.nodes);\n\n    if (this.virtualScroll) {\n      if (this.virtualNodes.length === 0) {\n        this.virtualNodes = [...this.nodes];\n      }\n\n      this.nodes = [...this.virtualNodes];\n\n      for (let item of this.virtualNodes) {\n        this.setVirtualExpandedAll(item, this.expandedAll);\n      }\n    }\n  }\n\n  setVirtualExpandedAll(item, expandedAll) {\n    let index = this.nodes.indexOf(item);\n\n    if (expandedAll) {\n      let addNodes = [];\n\n      const getNodes = nd => {\n        for (let child of nd.children) {\n          addNodes.push(child);\n          getNodes(child);\n        }\n      };\n\n      getNodes(item);\n      this.nodes.splice(index + 1, 0, ...addNodes);\n    }\n\n    this.nodes = [...this.nodes];\n  }\n\n  virtualToggle(node) {\n    let index = this.nodes.indexOf(node);\n\n    if (node.open) {\n      let addNodes = [];\n\n      const getNodes = nd => {\n        for (let child of nd.children) {\n          addNodes.push(child);\n          child.open && getNodes(child);\n        }\n      };\n\n      getNodes(node);\n      this.nodes.splice(index + 1, 0, ...addNodes);\n    } else {\n      let delCount = 0;\n\n      const getCount = nd => {\n        delCount += nd.children.length;\n\n        for (let child of nd.children) {\n          child.open && getCount(child);\n        }\n      };\n\n      getCount(node);\n      this.nodes.splice(index + 1, delCount);\n    }\n\n    this.nodes = [...this.nodes];\n  }\n\n  setActivatedNode(nodes) {\n    let before = this.activatedNode;\n    this.activatedNode = nodes.find(x => x.id == this.activatedId);\n\n    if (this.activatedNode) {\n      this.setParentOpen(nodes, this.activatedNode);\n      this.activatedChange.emit(this.activatedNode);\n    }\n\n    if (before) {\n      before.change && before.change();\n    }\n  }\n\n  setParentOpen(nodes, node) {\n    const getParent = child => {\n      if (XIsEmpty(child.pid)) return;\n      const parent = nodes.find(x => x.id === child.pid);\n\n      if (!XIsEmpty(parent)) {\n        this.expanded = [...this.expanded, parent.id];\n        parent.open = true;\n        parent.change && parent.change();\n        getParent(parent);\n      }\n    };\n\n    getParent(node);\n  }\n\n  onToggle(event, node) {\n    node.open = !node.open;\n\n    if (this.virtualScroll) {\n      if (this.lazy && !node.childrenLoaded) {\n        this.getLazyData(node, () => this.virtualToggle(node));\n      } else {\n        this.virtualToggle(node);\n      }\n    } else if (node.open && !node.childrenLoaded) {\n      if (this.lazy) {\n        this.getLazyData(node);\n      } else {\n        node.childrenLoaded = true;\n      }\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    this.cdr.detectChanges();\n  }\n\n  getLazyData(node, callBack) {\n    node.loading = true;\n    node.change && node.change();\n    this.data(node.id).pipe(map(x => x.map(y => {\n      y.level = node.level + 1;\n      y.checked = node.checked;\n      return y;\n    }))).subscribe(x => {\n      node.children = x;\n      node.childrenLoaded = true;\n      node.loading = false;\n      if (callBack) callBack();\n      node.change && node.change();\n      this.cdr.detectChanges();\n    });\n  }\n\n  addNode(node) {\n    let parent = this.treeData.find(x => x.id === node.pid);\n\n    const _addNode = () => {\n      if (parent) {\n        if (!parent.children) parent.children = [];\n        this.expanded = [...this.expanded, parent.id];\n        this.activatedId = node.id;\n        node.level = Number(parent.level) + 1;\n        node.pid = parent.id;\n        this.treeData.push(node);\n        this.setActivatedNode(this.treeData);\n        parent.open = true;\n        parent.leaf = true;\n        parent.children = [...parent.children, node];\n\n        if (this.virtualScroll) {\n          this.virtualToggle(parent);\n          this.cdr.detectChanges();\n        }\n\n        parent.change && parent.change();\n      } else if (XIsEmpty(node.pid)) {\n        this.activatedId = node.id;\n        node.level = 0;\n        this.treeData = [...this.treeData, node];\n        this.nodes = [...this.nodes, node];\n        this.setActivatedNode(this.treeData);\n        this.cdr.detectChanges();\n      }\n    };\n\n    if (this.lazy && parent && !parent.childrenLoaded) {\n      this.getLazyData(parent, () => {\n        _addNode();\n      });\n    } else {\n      _addNode();\n    }\n  }\n\n  removeNode(node) {\n    let parent = this.treeData.find(x => x.id === node.pid);\n\n    if (parent) {\n      if (!parent.children) parent.children = [];\n      parent.children.splice(parent.children.indexOf(node), 1);\n      parent.leaf = parent.children.length > 0;\n      if (!parent.leaf) this.activatedId = parent.id;\n\n      if (this.virtualScroll) {\n        let index = this.nodes.indexOf(node);\n        let aindex = index - 1;\n\n        if (index === 0 && this.nodes.length > 1) {\n          aindex = 1;\n        }\n\n        let activatedNode = this.nodes[aindex];\n        this.activatedId = activatedNode.id;\n        this.setActivatedNode(this.nodes);\n        this.nodes.splice(index, 1);\n        this.nodes = [...this.nodes];\n\n        if (activatedNode) {\n          activatedNode.change && activatedNode.change();\n        }\n\n        this.cdr.detectChanges();\n      }\n\n      parent.change && parent.change();\n    } else if (XIsEmpty(node.pid)) {\n      this.treeData.splice(this.treeData.indexOf(node), 1);\n      this.nodes.splice(this.nodes.indexOf(node), 1);\n\n      if (this.virtualScroll) {\n        this.nodes = [...this.nodes];\n      }\n\n      this.cdr.detectChanges();\n    }\n  }\n\n  updateNode(node, nowNode) {\n    Object.assign(node, nowNode);\n    node.change && node.change();\n  }\n\n  trackByItem(_index, item) {\n    return item.id;\n  }\n\n}\n/** @nocollapse */\n\n\nXTreeComponent.ɵfac = function XTreeComponent_Factory(t) {\n  return new (t || XTreeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.XConfigService));\n};\n/** @nocollapse */\n\n\nXTreeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XTreeComponent,\n  selectors: [[\"x-tree\"]],\n  viewQuery: function XTreeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c3, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tree = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 6,\n  vars: 3,\n  consts: [[1, \"x-tree\"], [\"tree\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollTpl\", \"\"], [\"type\", \"fto-loader\", 3, \"display\", 4, \"ngIf\"], [\"x-tree-node\", \"\", 3, \"node\", \"lazy\", \"lazyData\", \"nodeHeight\", \"nodeNowrap\", \"nodeAlignItems\", \"tree\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"x-tree-node\", \"\", 3, \"node\", \"lazy\", \"lazyData\", \"nodeHeight\", \"nodeNowrap\", \"nodeAlignItems\", \"tree\"], [3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [3, \"node\", \"lazy\", \"lazyData\", \"nodeHeight\", \"nodeNowrap\", \"nodeAlignItems\", \"tree\", \"virtualScroll\", 4, \"cdkVirtualFor\", \"cdkVirtualForOf\", \"cdkVirtualForTemplateCacheSize\", \"cdkVirtualForTrackBy\"], [3, \"node\", \"lazy\", \"lazyData\", \"nodeHeight\", \"nodeNowrap\", \"nodeAlignItems\", \"tree\", \"virtualScroll\"], [\"type\", \"fto-loader\"]],\n  template: function XTreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵtemplate(2, XTreeComponent_ul_2_Template, 2, 2, \"ul\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, XTreeComponent_ng_template_3_Template, 2, 8, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(5, XTreeComponent_x_icon_5_Template, 1, 2, \"x-icon\", 4);\n    }\n\n    if (rf & 2) {\n      const _r2 = i0.ɵɵreference(4);\n\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.virtualScroll)(\"ngIfElse\", _r2);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.lazy);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i4.XIconComponent, i4$1.CdkFixedSizeVirtualScroll, i4$1.CdkVirtualForOf, i4$1.CdkVirtualScrollViewport, XTreeNodeComponent],\n  styles: [\".x-tree{margin:0;padding:0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XTreeComponent, [{\n    type: Component,\n    args: [{\n      selector: `${XTreePrefix}`,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div #tree class=\\\"x-tree\\\">\\r\\n  <ul *ngIf=\\\"!virtualScroll; else virtualScrollTpl\\\">\\r\\n    <li\\r\\n      x-tree-node\\r\\n      *ngFor=\\\"let node of nodes; trackBy: trackByItem\\\"\\r\\n      [node]=\\\"node\\\"\\r\\n      [lazy]=\\\"lazy\\\"\\r\\n      [lazyData]=\\\"data\\\"\\r\\n      [nodeHeight]=\\\"nodeHeight\\\"\\r\\n      [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n      [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n      [tree]=\\\"this\\\"\\r\\n    ></li>\\r\\n  </ul>\\r\\n</div>\\r\\n\\r\\n<ng-template #virtualScrollTpl>\\r\\n  <cdk-virtual-scroll-viewport\\r\\n    [itemSize]=\\\"itemSize\\\"\\r\\n    [minBufferPx]=\\\"minBufferPx\\\"\\r\\n    [maxBufferPx]=\\\"maxBufferPx\\\"\\r\\n    [style.height.px]=\\\"virtualScrollHeight\\\"\\r\\n  >\\r\\n    <x-tree-node\\r\\n      *cdkVirtualFor=\\\"let node of nodes; templateCacheSize: 0; trackBy: trackByItem\\\"\\r\\n      [node]=\\\"node\\\"\\r\\n      [lazy]=\\\"lazy\\\"\\r\\n      [lazyData]=\\\"data\\\"\\r\\n      [nodeHeight]=\\\"nodeHeight\\\"\\r\\n      [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n      [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n      [tree]=\\\"this\\\"\\r\\n      [virtualScroll]=\\\"virtualScroll\\\"\\r\\n    ></x-tree-node>\\r\\n  </cdk-virtual-scroll-viewport>\\r\\n</ng-template>\\r\\n\\r\\n<!-- \\u63D0\\u524D\\u52A0\\u8F7Dloading\\u7684\\u56FE\\u6807-->\\r\\n<x-icon *ngIf=\\\"lazy\\\" [style.display]=\\\"'none'\\\" type=\\\"fto-loader\\\"></x-icon>\\r\\n\",\n      styles: [\".x-tree{margin:0;padding:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.XConfigService\n    }];\n  }, {\n    tree: [{\n      type: ViewChild,\n      args: ['tree', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass XTreeModule {}\n/** @nocollapse */\n\n\nXTreeModule.ɵfac = function XTreeModule_Factory(t) {\n  return new (t || XTreeModule)();\n};\n/** @nocollapse */\n\n\nXTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: XTreeModule\n});\n/** @nocollapse */\n\nXTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, FormsModule, XIconModule, XCheckboxModule, XOutletModule, XLinkModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XTreeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [XTreeComponent, XTreeNodeComponent, XTreeProperty, XTreeNodeProperty],\n      exports: [XTreeComponent, XTreeNodeComponent],\n      imports: [CommonModule, FormsModule, XIconModule, XCheckboxModule, XOutletModule, XLinkModule, ScrollingModule]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { XTreeComponent, XTreeModule, XTreeNodeComponent, XTreeNodePrefix, XTreeNodeProperty, XTreePrefix, XTreeProperty };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","ViewEncapsulation","ChangeDetectionStrategy","HostBinding","ViewChild","NgModule","__decorate","i1","XProperty","XDataConvert","XInputBoolean","XInputNumber","XWithConfig","XIsEmpty","XIsChange","XIsObservable","XSetData","XIsFunction","XIsUndefined","Subject","map","i2","CommonModule","i4","XIconModule","i4$1","ScrollingModule","i3","FormsModule","i5","XCheckboxModule","i6","XOutletModule","i7","XLinkModule","XTreePrefix","X_CONFIG_NAME","XTreeProperty","constructor","arguments","data","expanded","checked","expandedLevel","activatedChange","checkboxChange","manual","levelCheck","nodeNowrap","actions","minBufferPx","maxBufferPx","manualChange","ɵfac","ɵcmp","prototype","type","args","template","checkbox","lazy","activatedId","expandedAll","nodeOpen","spacing","labelTpl","nodeHeight","allowManyActivated","nodeAlignItems","virtualScroll","virtualScrollHeight","itemSize","XTreeNodePrefix","XTreeNodeProperty","node","level","lazyData","XTreeNodeComponent","renderer","elementRef","cdr","configService","rootClass","_loading","loading","value","detectChanges","paddingLeft","Number","tree","ngOnInit","change","check","setCheckbox","setIndeterminate","onActivate","event","activatedNode","leaf","onToggle","id","emit","stopPropagation","onCheckboxChange","indeterminate","children","setChildrenCheckbox","setParent","parent","nodes","find","x","pid","checkedList","filter","y","indeterminateList","length","setParentCheckbox","setChildren","isChecked","disabled","getChildren","forEach","getNodeDisabled","onAction","action","handler","trackByItem","_index","item","Renderer2","ElementRef","ChangeDetectorRef","XConfigService","NgForOf","NgIf","NgControlStatus","NgModel","XIconComponent","XCheckboxComponent","XOutletDirective","XLinkComponent","selector","encapsulation","None","changeDetection","OnPush","styles","XTreeComponent","virtualNodes","dataIsFunc","getting","treeData","_unSubject","ngOnChanges","changes","setData","setExpandedAll","setActivatedNode","setCheckedKeys","setManual","ngOnDestroy","next","unsubscribe","subscribe","setDataChange","getDataByFunc","open","Boolean","indexOf","childrenLoaded","getCheckedNodes","result","includes","getCheckedKeys","keys","clear","setVirtualExpandedAll","index","addNodes","getNodes","nd","child","push","splice","virtualToggle","delCount","getCount","before","setParentOpen","getParent","getLazyData","preventDefault","callBack","pipe","addNode","_addNode","removeNode","aindex","updateNode","nowNode","Object","assign","CdkFixedSizeVirtualScroll","CdkVirtualForOf","CdkVirtualScrollViewport","static","XTreeModule","ɵmod","ɵinj","declarations","exports","imports"],"sources":["/Users/lzl/my-angular-app/node_modules/@ng-nest/ui/fesm2020/ng-nest-ui-tree.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, ViewChild, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ng-nest/ui/core';\nimport { XProperty, XDataConvert, XInputBoolean, XInputNumber, XWithConfig, XIsEmpty, XIsChange, XIsObservable, XSetData, XIsFunction, XIsUndefined } from '@ng-nest/ui/core';\nimport { Subject, map } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@ng-nest/ui/icon';\nimport { XIconModule } from '@ng-nest/ui/icon';\nimport * as i4$1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i5 from '@ng-nest/ui/checkbox';\nimport { XCheckboxModule } from '@ng-nest/ui/checkbox';\nimport * as i6 from '@ng-nest/ui/outlet';\nimport { XOutletModule } from '@ng-nest/ui/outlet';\nimport * as i7 from '@ng-nest/ui/link';\nimport { XLinkModule } from '@ng-nest/ui/link';\n\n/**\r\n * Tree\r\n * @selector x-tree\r\n * @decorator component\r\n */\r\nconst XTreePrefix = 'x-tree';\r\nconst X_CONFIG_NAME = 'tree';\r\n/**\r\n * Tree Property\r\n */\r\nclass XTreeProperty extends XProperty {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * @zh_CN 节点数据\r\n         * @en_US Node data\r\n         */\r\n        this.data = [];\r\n        /**\r\n         * @zh_CN 展开的节点\r\n         * @en_US Expanded node\r\n         */\r\n        this.expanded = [];\r\n        /**\r\n         * @zh_CN checkbox 选中的节点\r\n         * @en_US Checkbox selected node\r\n         */\r\n        this.checked = [];\r\n        /**\r\n         * @zh_CN 默认展开的层级\r\n         * @en_US Default expanded level\r\n         */\r\n        this.expandedLevel = -1;\r\n        /**\r\n         * @zh_CN 当前点击选中的节点变化的事件\r\n         * @en_US The event of the currently clicked node change\r\n         */\r\n        this.activatedChange = new EventEmitter();\r\n        /**\r\n         * @zh_CN 使用 checkedbox 选中变化的事件\r\n         * @en_US Use checkedbox to select changed events\r\n         */\r\n        this.checkboxChange = new EventEmitter();\r\n        /**\r\n         * @zh_CN 如果 data 是函数类型，可以通过此参数控制请求，常用于弹框中的表格，弹出后再请求\r\n         * @en_US If data is a function type, you can use this parameter to control the request, which is often used in the form in the pop-up box, and then request it after it pops up\r\n         */\r\n        this.manual = true;\r\n        /**\r\n         * @zh_CN checkbox 状态改变触发层级检查\r\n         * @en_US Checkbox status changes trigger level checks\r\n         */\r\n        this.levelCheck = true;\r\n        /**\r\n         * @zh_CN 节点内容不换行显示省略号\r\n         * @en_US Show ellipsis without wrapping\r\n         */\r\n        this.nodeNowrap = true;\r\n        /**\r\n         * @zh_CN 树节点操作按钮\r\n         * @en_US Tree node operation buttons\r\n         */\r\n        this.actions = [];\r\n        /**\r\n         * @zh_CN 超出可视窗口缓冲区的最小值，对应 cdk scroll 中的参数，开启虚拟滚动才生效\r\n         * @en_US Exceed the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll\r\n         */\r\n        this.minBufferPx = 100;\r\n        /**\r\n         * @zh_CN 渲染新数据缓冲区的像素，对应 cdk scroll 中的参数，开启虚拟滚动才生效\r\n         * @en_US Render the pixels of the new data buffer, corresponding to the parameters in cdk scroll\r\n         */\r\n        this.maxBufferPx = 200;\r\n        /**\r\n         * @zh_CN 参数控制请求改变事件\r\n         * @en_US Parameter control request change event\r\n         */\r\n        this.manualChange = new EventEmitter();\r\n    }\r\n}\r\n/** @nocollapse */ XTreeProperty.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeProperty, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XTreeProperty.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XTreeProperty, selector: \"ng-component\", inputs: { data: \"data\", checkbox: \"checkbox\", lazy: \"lazy\", activatedId: \"activatedId\", expanded: \"expanded\", checked: \"checked\", expandedAll: \"expandedAll\", expandedLevel: \"expandedLevel\", nodeOpen: \"nodeOpen\", spacing: \"spacing\", labelTpl: \"labelTpl\", nodeHeight: \"nodeHeight\", allowManyActivated: \"allowManyActivated\", manual: \"manual\", levelCheck: \"levelCheck\", nodeNowrap: \"nodeNowrap\", nodeAlignItems: \"nodeAlignItems\", actions: \"actions\", virtualScroll: \"virtualScroll\", virtualScrollHeight: \"virtualScrollHeight\", itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, outputs: { activatedChange: \"activatedChange\", checkboxChange: \"checkboxChange\", manualChange: \"manualChange\" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });\r\n__decorate([\r\n    XDataConvert()\r\n], XTreeProperty.prototype, \"data\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"checkbox\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"lazy\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"expandedAll\", void 0);\r\n__decorate([\r\n    XInputNumber()\r\n], XTreeProperty.prototype, \"expandedLevel\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"nodeOpen\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME, 0.875),\r\n    XInputNumber()\r\n], XTreeProperty.prototype, \"spacing\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME, 0),\r\n    XInputNumber()\r\n], XTreeProperty.prototype, \"nodeHeight\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"allowManyActivated\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"manual\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"levelCheck\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"nodeNowrap\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME, 'center')\r\n], XTreeProperty.prototype, \"nodeAlignItems\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME),\r\n    XInputBoolean()\r\n], XTreeProperty.prototype, \"virtualScroll\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME, 400),\r\n    XInputNumber()\r\n], XTreeProperty.prototype, \"virtualScrollHeight\", void 0);\r\n__decorate([\r\n    XWithConfig(X_CONFIG_NAME, 26),\r\n    XInputNumber()\r\n], XTreeProperty.prototype, \"itemSize\", void 0);\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeProperty, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '' }]\r\n        }], propDecorators: { data: [{\r\n                type: Input\r\n            }], checkbox: [{\r\n                type: Input\r\n            }], lazy: [{\r\n                type: Input\r\n            }], activatedId: [{\r\n                type: Input\r\n            }], expanded: [{\r\n                type: Input\r\n            }], checked: [{\r\n                type: Input\r\n            }], expandedAll: [{\r\n                type: Input\r\n            }], expandedLevel: [{\r\n                type: Input\r\n            }], nodeOpen: [{\r\n                type: Input\r\n            }], spacing: [{\r\n                type: Input\r\n            }], labelTpl: [{\r\n                type: Input\r\n            }], nodeHeight: [{\r\n                type: Input\r\n            }], allowManyActivated: [{\r\n                type: Input\r\n            }], activatedChange: [{\r\n                type: Output\r\n            }], checkboxChange: [{\r\n                type: Output\r\n            }], manual: [{\r\n                type: Input\r\n            }], levelCheck: [{\r\n                type: Input\r\n            }], nodeNowrap: [{\r\n                type: Input\r\n            }], nodeAlignItems: [{\r\n                type: Input\r\n            }], actions: [{\r\n                type: Input\r\n            }], virtualScroll: [{\r\n                type: Input\r\n            }], virtualScrollHeight: [{\r\n                type: Input\r\n            }], itemSize: [{\r\n                type: Input\r\n            }], minBufferPx: [{\r\n                type: Input\r\n            }], maxBufferPx: [{\r\n                type: Input\r\n            }], manualChange: [{\r\n                type: Output\r\n            }] } });\r\n/**\r\n * TreeNode\r\n * @selector x-tree-node\r\n * @decorator directive\r\n */\r\nconst XTreeNodePrefix = 'x-tree-node';\r\n/**\r\n * TreeNode Property\r\n */\r\nclass XTreeNodeProperty extends XProperty {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * @zh_CN 节点数据\r\n         * @en_US Node data\r\n         */\r\n        this.node = {};\r\n        /**\r\n         * @zh_CN 节点的高度，单位 rem\r\n         * @en_US The height of the node in rem\r\n         */\r\n        this.nodeHeight = 0;\r\n        /**\r\n         * @zh_CN 节点垂直对齐方式\r\n         * @en_US Show ellipsis without wrapping\r\n         */\r\n        this.nodeAlignItems = 'center';\r\n    }\r\n}\r\n/** @nocollapse */ XTreeNodeProperty.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeNodeProperty, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XTreeNodeProperty.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XTreeNodeProperty, selector: \"ng-component\", inputs: { node: \"node\", level: \"level\", lazy: \"lazy\", nodeHeight: \"nodeHeight\", nodeNowrap: \"nodeNowrap\", nodeAlignItems: \"nodeAlignItems\", lazyData: \"lazyData\", virtualScroll: \"virtualScroll\" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeNodeProperty.prototype, \"lazy\", void 0);\r\n__decorate([\r\n    XInputNumber()\r\n], XTreeNodeProperty.prototype, \"nodeHeight\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeNodeProperty.prototype, \"nodeNowrap\", void 0);\r\n__decorate([\r\n    XInputBoolean()\r\n], XTreeNodeProperty.prototype, \"virtualScroll\", void 0);\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeNodeProperty, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '' }]\r\n        }], propDecorators: { node: [{\r\n                type: Input\r\n            }], level: [{\r\n                type: Input\r\n            }], lazy: [{\r\n                type: Input\r\n            }], nodeHeight: [{\r\n                type: Input\r\n            }], nodeNowrap: [{\r\n                type: Input\r\n            }], nodeAlignItems: [{\r\n                type: Input\r\n            }], lazyData: [{\r\n                type: Input\r\n            }], virtualScroll: [{\r\n                type: Input\r\n            }] } });\n\nclass XTreeNodeComponent extends XTreeNodeProperty {\r\n    constructor(\r\n    // @Optional() public tree: XTreeComponent,\r\n    renderer, elementRef, cdr, configService) {\r\n        super();\r\n        this.renderer = renderer;\r\n        this.elementRef = elementRef;\r\n        this.cdr = cdr;\r\n        this.configService = configService;\r\n        this.rootClass = true;\r\n        this._loading = false;\r\n    }\r\n    get loading() {\r\n        return this._loading;\r\n    }\r\n    set loading(value) {\r\n        this._loading = value;\r\n        this.cdr.detectChanges();\r\n    }\r\n    get paddingLeft() {\r\n        return Number(this.node?.level ? this.node.level : 0) * Number(this.tree.spacing);\r\n    }\r\n    ngOnInit() {\r\n        this.node.change = (check) => {\r\n            if (check)\r\n                this.setCheckbox();\r\n            this.cdr.detectChanges();\r\n        };\r\n        this.level = this.node?.level ? this.node.level : 0;\r\n        if (!this.tree.levelCheck)\r\n            return;\r\n        if (this.node.checked)\r\n            this.setCheckbox();\r\n        this.setIndeterminate(this.node);\r\n    }\r\n    onActivate(event, node) {\r\n        const change = this.tree.activatedNode?.change;\r\n        this.tree.nodeOpen && node.leaf && this.tree.onToggle(event, node);\r\n        if (this.tree.activatedNode) {\r\n            if (this.tree.activatedNode.id === node.id && !this.tree.allowManyActivated)\r\n                return;\r\n        }\r\n        this.tree.activatedNode = node;\r\n        this.tree.activatedChange.emit(node);\r\n        change && change();\r\n        event.stopPropagation();\r\n        this.cdr.detectChanges();\r\n    }\r\n    onCheckboxChange() {\r\n        this.setCheckbox();\r\n        this.tree.checkboxChange.emit(this.node);\r\n    }\r\n    setCheckbox() {\r\n        if (!this.tree.levelCheck)\r\n            return;\r\n        this.node.indeterminate = this.node.checked;\r\n        this.node.children && this.setChildrenCheckbox(this.node.checked);\r\n        if (this.virtualScroll) {\r\n            const setParent = (node) => {\r\n                let parent = this.tree.nodes.find((x) => x.id === node.pid);\r\n                if (!parent || XIsEmpty(parent.children))\r\n                    return;\r\n                let checkedList = parent.children?.filter((y) => y.checked);\r\n                let indeterminateList = parent.children?.filter((y) => y.indeterminate);\r\n                parent.checked = checkedList?.length === parent.children?.length;\r\n                parent.indeterminate = checkedList.length > 0 || indeterminateList.length > 0;\r\n                parent.change && parent.change();\r\n                setParent(parent);\r\n            };\r\n            setParent(this.node);\r\n        }\r\n        else {\r\n            this.parent?.setParentCheckbox();\r\n        }\r\n    }\r\n    setChildrenCheckbox(checked) {\r\n        const setChildren = (children, isChecked) => {\r\n            if (XIsEmpty(children))\r\n                return;\r\n            for (let x of children) {\r\n                if (x.disabled)\r\n                    continue;\r\n                x.checked = isChecked;\r\n                x.indeterminate = isChecked;\r\n                x.change && x.change();\r\n                setChildren(x.children, isChecked);\r\n            }\r\n        };\r\n        setChildren(this.node.children, checked);\r\n        this.cdr.detectChanges();\r\n    }\r\n    setParentCheckbox() {\r\n        if (XIsEmpty(this.node.children))\r\n            return;\r\n        let checkedList = this.node.children?.filter((x) => x.checked);\r\n        let indeterminateList = this.node.children?.filter((x) => x.indeterminate);\r\n        this.node.checked = checkedList?.length === this.node.children?.length;\r\n        this.node.indeterminate = checkedList.length > 0 || indeterminateList.length > 0;\r\n        this.parent?.setParentCheckbox();\r\n        this.cdr.detectChanges();\r\n    }\r\n    setIndeterminate(node) {\r\n        const getChildren = (children) => {\r\n            if (XIsEmpty(children))\r\n                return;\r\n            children.forEach((x) => {\r\n                if (x.indeterminate || x.checked) {\r\n                    node.indeterminate = true;\r\n                    return;\r\n                }\r\n                getChildren(x.children);\r\n            });\r\n        };\r\n        getChildren(node.children);\r\n        this.cdr.detectChanges();\r\n    }\r\n    getNodeDisabled(disabled) {\r\n        return disabled;\r\n    }\r\n    onAction(event, action, node) {\r\n        action.handler && action.handler(node);\r\n        event.stopPropagation();\r\n    }\r\n    trackByItem(_index, item) {\r\n        return item.id;\r\n    }\r\n}\r\n/** @nocollapse */ XTreeNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeNodeComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.XConfigService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XTreeNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XTreeNodeComponent, selector: \"x-tree-node, [x-tree-node]\", inputs: { parent: \"parent\", tree: \"tree\" }, host: { properties: { \"class.x-tree-node\": \"this.rootClass\" } }, usesInheritance: true, ngImport: i0, template: \"<div\\r\\n  class=\\\"x-tree-node-content\\\"\\r\\n  [class.x-activated]=\\\"tree.activatedNode?.id === node.id\\\"\\r\\n  [style.padding-left.rem]=\\\"paddingLeft\\\"\\r\\n  [style.height.rem]=\\\"node.height ? node.height : nodeHeight ? nodeHeight : ''\\\"\\r\\n  [style.align-items]=\\\"node.alignItems ? node.alignItems : nodeAlignItems\\\"\\r\\n  (click)=\\\"onActivate($event, node)\\\"\\r\\n>\\r\\n  <x-icon\\r\\n    *ngIf=\\\"!node.loading\\\"\\r\\n    [class.is-leaf]=\\\"!node.leaf\\\"\\r\\n    [class.is-open]=\\\"node.open\\\"\\r\\n    type=\\\"fto-chevron-right\\\"\\r\\n    (click)=\\\"!tree.nodeOpen && tree.onToggle($event, node)\\\"\\r\\n  ></x-icon>\\r\\n  <x-icon *ngIf=\\\"node.loading\\\" type=\\\"fto-loader\\\" [spin]=\\\"node.loading\\\"></x-icon>\\r\\n  <x-checkbox\\r\\n    *ngIf=\\\"tree.checkbox\\\"\\r\\n    [data]=\\\"[{ label: '', id: node.id }]\\\"\\r\\n    [(ngModel)]=\\\"node.checked\\\"\\r\\n    (ngModelChange)=\\\"onCheckboxChange()\\\"\\r\\n    [indeterminate]=\\\"node.indeterminate\\\"\\r\\n    [disabled]=\\\"getNodeDisabled(node.disabled)\\\"\\r\\n    (click)=\\\"$event.stopPropagation()\\\"\\r\\n  ></x-checkbox>\\r\\n  <span\\r\\n    class=\\\"x-tree-node-label\\\"\\r\\n    [class.nowrap]=\\\"node.nowrap === false || node.nowrap === true ? node.nowrap : nodeNowrap\\\"\\r\\n    [title]=\\\"node.label\\\"\\r\\n    *ngIf=\\\"!tree.labelTpl; else labelTpl\\\"\\r\\n    >{{ node.label }}</span\\r\\n  >\\r\\n  <ng-template #labelTpl>\\r\\n    <ng-container *xOutlet=\\\"tree.labelTpl; context: { $node: node }\\\"></ng-container>\\r\\n  </ng-template>\\r\\n  <span class=\\\"x-tree-node-operations\\\">\\r\\n    <x-link\\r\\n      *ngFor=\\\"let action of tree.actions; trackBy: trackByItem\\\"\\r\\n      [icon]=\\\"action.icon\\\"\\r\\n      [title]=\\\"action.label\\\"\\r\\n      (click)=\\\"onAction($event, action, node)\\\"\\r\\n    ></x-link>\\r\\n  </span>\\r\\n</div>\\r\\n<ul *ngIf=\\\"!virtualScroll && (node.childrenLoaded || (node.leaf && node.open))\\\" [hidden]=\\\"!node.open\\\">\\r\\n  <li\\r\\n    x-tree-node\\r\\n    *ngFor=\\\"let child of node.children; trackBy: trackByItem\\\"\\r\\n    [node]=\\\"child\\\"\\r\\n    [parent]=\\\"this\\\"\\r\\n    [lazy]=\\\"lazy\\\"\\r\\n    [lazyData]=\\\"lazyData\\\"\\r\\n    [nodeHeight]=\\\"nodeHeight\\\"\\r\\n    [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n    [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n    [tree]=\\\"tree\\\"\\r\\n  ></li>\\r\\n</ul>\\r\\n\", styles: [\".x-tree-node{margin:0;padding:0}.x-tree-node-content{display:flex;padding:.0625rem 0;cursor:pointer}.x-tree-node-content x-icon{padding:.25rem;color:var(--x-text-400);font-size:1rem;margin-right:.125rem;transition:var(--x-animation-duration-base)}.x-tree-node-content x-icon.is-leaf{visibility:hidden}.x-tree-node-content x-icon.is-open{transform:rotate(90deg)}.x-tree-node-content x-icon:hover{color:var(--x-text-300)}.x-tree-node-content x-checkbox{margin-right:.325rem;padding:.25rem 0}.x-tree-node-content:hover,.x-tree-node-content.x-activated{background-color:var(--x-background-a100)}.x-tree-node-content:hover .x-tree-node-label,.x-tree-node-content.x-activated .x-tree-node-label{color:var(--x-primary)}.x-tree-node-content:hover .x-tree-node-operations{display:flex;align-items:center}.x-tree-node-operations{display:none}.x-tree-node-operations .x-link{padding:0 .125rem}.x-tree-node-label{flex:1;-webkit-user-select:none;user-select:none}.x-tree-node-label.nowrap{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i4.XIconComponent, selector: \"x-icon\" }, { kind: \"component\", type: i5.XCheckboxComponent, selector: \"x-checkbox\" }, { kind: \"directive\", type: i6.XOutletDirective, selector: \"[xOutlet]\", inputs: [\"xOutletContext\", \"xOutlet\"] }, { kind: \"component\", type: i7.XLinkComponent, selector: \"x-link\" }, { kind: \"component\", type: XTreeNodeComponent, selector: \"x-tree-node, [x-tree-node]\", inputs: [\"parent\", \"tree\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeNodeComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: `${XTreeNodePrefix}, [${XTreeNodePrefix}]`, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div\\r\\n  class=\\\"x-tree-node-content\\\"\\r\\n  [class.x-activated]=\\\"tree.activatedNode?.id === node.id\\\"\\r\\n  [style.padding-left.rem]=\\\"paddingLeft\\\"\\r\\n  [style.height.rem]=\\\"node.height ? node.height : nodeHeight ? nodeHeight : ''\\\"\\r\\n  [style.align-items]=\\\"node.alignItems ? node.alignItems : nodeAlignItems\\\"\\r\\n  (click)=\\\"onActivate($event, node)\\\"\\r\\n>\\r\\n  <x-icon\\r\\n    *ngIf=\\\"!node.loading\\\"\\r\\n    [class.is-leaf]=\\\"!node.leaf\\\"\\r\\n    [class.is-open]=\\\"node.open\\\"\\r\\n    type=\\\"fto-chevron-right\\\"\\r\\n    (click)=\\\"!tree.nodeOpen && tree.onToggle($event, node)\\\"\\r\\n  ></x-icon>\\r\\n  <x-icon *ngIf=\\\"node.loading\\\" type=\\\"fto-loader\\\" [spin]=\\\"node.loading\\\"></x-icon>\\r\\n  <x-checkbox\\r\\n    *ngIf=\\\"tree.checkbox\\\"\\r\\n    [data]=\\\"[{ label: '', id: node.id }]\\\"\\r\\n    [(ngModel)]=\\\"node.checked\\\"\\r\\n    (ngModelChange)=\\\"onCheckboxChange()\\\"\\r\\n    [indeterminate]=\\\"node.indeterminate\\\"\\r\\n    [disabled]=\\\"getNodeDisabled(node.disabled)\\\"\\r\\n    (click)=\\\"$event.stopPropagation()\\\"\\r\\n  ></x-checkbox>\\r\\n  <span\\r\\n    class=\\\"x-tree-node-label\\\"\\r\\n    [class.nowrap]=\\\"node.nowrap === false || node.nowrap === true ? node.nowrap : nodeNowrap\\\"\\r\\n    [title]=\\\"node.label\\\"\\r\\n    *ngIf=\\\"!tree.labelTpl; else labelTpl\\\"\\r\\n    >{{ node.label }}</span\\r\\n  >\\r\\n  <ng-template #labelTpl>\\r\\n    <ng-container *xOutlet=\\\"tree.labelTpl; context: { $node: node }\\\"></ng-container>\\r\\n  </ng-template>\\r\\n  <span class=\\\"x-tree-node-operations\\\">\\r\\n    <x-link\\r\\n      *ngFor=\\\"let action of tree.actions; trackBy: trackByItem\\\"\\r\\n      [icon]=\\\"action.icon\\\"\\r\\n      [title]=\\\"action.label\\\"\\r\\n      (click)=\\\"onAction($event, action, node)\\\"\\r\\n    ></x-link>\\r\\n  </span>\\r\\n</div>\\r\\n<ul *ngIf=\\\"!virtualScroll && (node.childrenLoaded || (node.leaf && node.open))\\\" [hidden]=\\\"!node.open\\\">\\r\\n  <li\\r\\n    x-tree-node\\r\\n    *ngFor=\\\"let child of node.children; trackBy: trackByItem\\\"\\r\\n    [node]=\\\"child\\\"\\r\\n    [parent]=\\\"this\\\"\\r\\n    [lazy]=\\\"lazy\\\"\\r\\n    [lazyData]=\\\"lazyData\\\"\\r\\n    [nodeHeight]=\\\"nodeHeight\\\"\\r\\n    [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n    [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n    [tree]=\\\"tree\\\"\\r\\n  ></li>\\r\\n</ul>\\r\\n\", styles: [\".x-tree-node{margin:0;padding:0}.x-tree-node-content{display:flex;padding:.0625rem 0;cursor:pointer}.x-tree-node-content x-icon{padding:.25rem;color:var(--x-text-400);font-size:1rem;margin-right:.125rem;transition:var(--x-animation-duration-base)}.x-tree-node-content x-icon.is-leaf{visibility:hidden}.x-tree-node-content x-icon.is-open{transform:rotate(90deg)}.x-tree-node-content x-icon:hover{color:var(--x-text-300)}.x-tree-node-content x-checkbox{margin-right:.325rem;padding:.25rem 0}.x-tree-node-content:hover,.x-tree-node-content.x-activated{background-color:var(--x-background-a100)}.x-tree-node-content:hover .x-tree-node-label,.x-tree-node-content.x-activated .x-tree-node-label{color:var(--x-primary)}.x-tree-node-content:hover .x-tree-node-operations{display:flex;align-items:center}.x-tree-node-operations{display:none}.x-tree-node-operations .x-link{padding:0 .125rem}.x-tree-node-label{flex:1;-webkit-user-select:none;user-select:none}.x-tree-node-label.nowrap{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.XConfigService }]; }, propDecorators: { parent: [{\r\n                type: Input\r\n            }], tree: [{\r\n                type: Input\r\n            }], rootClass: [{\r\n                type: HostBinding,\r\n                args: ['class.x-tree-node']\r\n            }] } });\n\nclass XTreeComponent extends XTreeProperty {\r\n    constructor(renderer, elementRef, cdr, configService) {\r\n        super();\r\n        this.renderer = renderer;\r\n        this.elementRef = elementRef;\r\n        this.cdr = cdr;\r\n        this.configService = configService;\r\n        this.nodes = [];\r\n        this.virtualNodes = [];\r\n        this.dataIsFunc = false;\r\n        this.getting = false;\r\n        this.treeData = [];\r\n        this._unSubject = new Subject();\r\n    }\r\n    ngOnChanges(changes) {\r\n        const { expandedAll, data, activatedId, checked, manual } = changes;\r\n        XIsChange(data) && this.setData();\r\n        XIsChange(expandedAll) && this.setExpandedAll();\r\n        XIsChange(activatedId) && this.setActivatedNode(this.treeData);\r\n        XIsChange(checked) && this.setCheckedKeys(this.checked);\r\n        XIsChange(manual) && this.setManual();\r\n    }\r\n    ngOnDestroy() {\r\n        this._unSubject.next();\r\n        this._unSubject.unsubscribe();\r\n    }\r\n    setData() {\r\n        if (typeof this.data === 'undefined')\r\n            return;\r\n        this.dataIsFunc = false;\r\n        if (XIsObservable(this.data)) {\r\n            XSetData(this.data, this._unSubject).subscribe((x) => {\r\n                this.setDataChange(x);\r\n            });\r\n        }\r\n        else if (XIsFunction(this.data)) {\r\n            this.dataIsFunc = true;\r\n            this.getDataByFunc();\r\n        }\r\n        else {\r\n            this.setDataChange(this.data);\r\n        }\r\n    }\r\n    setManual() {\r\n        if (this.dataIsFunc)\r\n            this.getDataByFunc();\r\n    }\r\n    getDataByFunc() {\r\n        if (!this.manual)\r\n            return;\r\n        XSetData(this.data(), this._unSubject).subscribe((x) => {\r\n            this.setDataChange(x);\r\n        });\r\n    }\r\n    setDataChange(value) {\r\n        !XIsEmpty(this.activatedId) && this.setActivatedNode(value);\r\n        const getChildren = (node, level) => {\r\n            node.level = level;\r\n            node.open = Boolean(this.expandedAll) || level <= this.expandedLevel || this.expanded.indexOf(node.id) >= 0;\r\n            node.checked = this.checked.indexOf(node.id) >= 0;\r\n            node.childrenLoaded = node.open;\r\n            if (XIsUndefined(node.children))\r\n                node.children = value.filter((y) => y.pid === node.id);\r\n            if (XIsUndefined(node.leaf))\r\n                node.leaf = node.children?.length > 0;\r\n            if (node.leaf)\r\n                node.children?.map((y) => getChildren(y, level + 1));\r\n            return node;\r\n        };\r\n        this.treeData = value;\r\n        this.nodes = value.filter((x) => XIsEmpty(x.pid)).map((x) => getChildren(x, 0));\r\n        this.cdr.detectChanges();\r\n    }\r\n    getCheckedNodes() {\r\n        let result = [];\r\n        const getChildren = (nodes) => {\r\n            if (XIsEmpty(nodes))\r\n                return;\r\n            nodes.forEach((x) => {\r\n                if (x.checked && !result.includes(x)) {\r\n                    result = [...result, x];\r\n                }\r\n                getChildren(x.children);\r\n            });\r\n        };\r\n        getChildren(this.nodes);\r\n        return result;\r\n    }\r\n    getCheckedKeys() {\r\n        return this.getCheckedNodes().map((x) => x.id);\r\n    }\r\n    setCheckedKeys(keys = []) {\r\n        const setChildren = (nodes, clear = false) => {\r\n            if (XIsEmpty(nodes))\r\n                return;\r\n            nodes.forEach((x) => {\r\n                x.checked = !clear && keys.indexOf(x.id) >= 0;\r\n                x.change && x.change(true);\r\n                setChildren(x.children, clear);\r\n            });\r\n        };\r\n        setChildren(this.nodes, keys.length === 0);\r\n        this.cdr.detectChanges();\r\n    }\r\n    setExpandedAll() {\r\n        const setChildren = (nodes) => {\r\n            if (XIsEmpty(nodes))\r\n                return;\r\n            nodes.forEach((x) => {\r\n                x.open = Boolean(this.expandedAll);\r\n                x.change && x.change();\r\n                setChildren(x.children);\r\n            });\r\n        };\r\n        setChildren(this.nodes);\r\n        if (this.virtualScroll) {\r\n            if (this.virtualNodes.length === 0) {\r\n                this.virtualNodes = [...this.nodes];\r\n            }\r\n            this.nodes = [...this.virtualNodes];\r\n            for (let item of this.virtualNodes) {\r\n                this.setVirtualExpandedAll(item, this.expandedAll);\r\n            }\r\n        }\r\n    }\r\n    setVirtualExpandedAll(item, expandedAll) {\r\n        let index = this.nodes.indexOf(item);\r\n        if (expandedAll) {\r\n            let addNodes = [];\r\n            const getNodes = (nd) => {\r\n                for (let child of nd.children) {\r\n                    addNodes.push(child);\r\n                    getNodes(child);\r\n                }\r\n            };\r\n            getNodes(item);\r\n            this.nodes.splice(index + 1, 0, ...addNodes);\r\n        }\r\n        this.nodes = [...this.nodes];\r\n    }\r\n    virtualToggle(node) {\r\n        let index = this.nodes.indexOf(node);\r\n        if (node.open) {\r\n            let addNodes = [];\r\n            const getNodes = (nd) => {\r\n                for (let child of nd.children) {\r\n                    addNodes.push(child);\r\n                    child.open && getNodes(child);\r\n                }\r\n            };\r\n            getNodes(node);\r\n            this.nodes.splice(index + 1, 0, ...addNodes);\r\n        }\r\n        else {\r\n            let delCount = 0;\r\n            const getCount = (nd) => {\r\n                delCount += nd.children.length;\r\n                for (let child of nd.children) {\r\n                    child.open && getCount(child);\r\n                }\r\n            };\r\n            getCount(node);\r\n            this.nodes.splice(index + 1, delCount);\r\n        }\r\n        this.nodes = [...this.nodes];\r\n    }\r\n    setActivatedNode(nodes) {\r\n        let before = this.activatedNode;\r\n        this.activatedNode = nodes.find((x) => x.id == this.activatedId);\r\n        if (this.activatedNode) {\r\n            this.setParentOpen(nodes, this.activatedNode);\r\n            this.activatedChange.emit(this.activatedNode);\r\n        }\r\n        if (before) {\r\n            before.change && before.change();\r\n        }\r\n    }\r\n    setParentOpen(nodes, node) {\r\n        const getParent = (child) => {\r\n            if (XIsEmpty(child.pid))\r\n                return;\r\n            const parent = nodes.find((x) => x.id === child.pid);\r\n            if (!XIsEmpty(parent)) {\r\n                this.expanded = [...this.expanded, parent.id];\r\n                parent.open = true;\r\n                parent.change && parent.change();\r\n                getParent(parent);\r\n            }\r\n        };\r\n        getParent(node);\r\n    }\r\n    onToggle(event, node) {\r\n        node.open = !node.open;\r\n        if (this.virtualScroll) {\r\n            if (this.lazy && !node.childrenLoaded) {\r\n                this.getLazyData(node, () => this.virtualToggle(node));\r\n            }\r\n            else {\r\n                this.virtualToggle(node);\r\n            }\r\n        }\r\n        else if (node.open && !node.childrenLoaded) {\r\n            if (this.lazy) {\r\n                this.getLazyData(node);\r\n            }\r\n            else {\r\n                node.childrenLoaded = true;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.cdr.detectChanges();\r\n    }\r\n    getLazyData(node, callBack) {\r\n        node.loading = true;\r\n        node.change && node.change();\r\n        this.data(node.id)\r\n            .pipe(map((x) => x.map((y) => {\r\n            y.level = node.level + 1;\r\n            y.checked = node.checked;\r\n            return y;\r\n        })))\r\n            .subscribe((x) => {\r\n            node.children = x;\r\n            node.childrenLoaded = true;\r\n            node.loading = false;\r\n            if (callBack)\r\n                callBack();\r\n            node.change && node.change();\r\n            this.cdr.detectChanges();\r\n        });\r\n    }\r\n    addNode(node) {\r\n        let parent = this.treeData.find((x) => x.id === node.pid);\r\n        const _addNode = () => {\r\n            if (parent) {\r\n                if (!parent.children)\r\n                    parent.children = [];\r\n                this.expanded = [...this.expanded, parent.id];\r\n                this.activatedId = node.id;\r\n                node.level = Number(parent.level) + 1;\r\n                node.pid = parent.id;\r\n                this.treeData.push(node);\r\n                this.setActivatedNode(this.treeData);\r\n                parent.open = true;\r\n                parent.leaf = true;\r\n                parent.children = [...parent.children, node];\r\n                if (this.virtualScroll) {\r\n                    this.virtualToggle(parent);\r\n                    this.cdr.detectChanges();\r\n                }\r\n                parent.change && parent.change();\r\n            }\r\n            else if (XIsEmpty(node.pid)) {\r\n                this.activatedId = node.id;\r\n                node.level = 0;\r\n                this.treeData = [...this.treeData, node];\r\n                this.nodes = [...this.nodes, node];\r\n                this.setActivatedNode(this.treeData);\r\n                this.cdr.detectChanges();\r\n            }\r\n        };\r\n        if (this.lazy && parent && !parent.childrenLoaded) {\r\n            this.getLazyData(parent, () => {\r\n                _addNode();\r\n            });\r\n        }\r\n        else {\r\n            _addNode();\r\n        }\r\n    }\r\n    removeNode(node) {\r\n        let parent = this.treeData.find((x) => x.id === node.pid);\r\n        if (parent) {\r\n            if (!parent.children)\r\n                parent.children = [];\r\n            parent.children.splice(parent.children.indexOf(node), 1);\r\n            parent.leaf = parent.children.length > 0;\r\n            if (!parent.leaf)\r\n                this.activatedId = parent.id;\r\n            if (this.virtualScroll) {\r\n                let index = this.nodes.indexOf(node);\r\n                let aindex = index - 1;\r\n                if (index === 0 && this.nodes.length > 1) {\r\n                    aindex = 1;\r\n                }\r\n                let activatedNode = this.nodes[aindex];\r\n                this.activatedId = activatedNode.id;\r\n                this.setActivatedNode(this.nodes);\r\n                this.nodes.splice(index, 1);\r\n                this.nodes = [...this.nodes];\r\n                if (activatedNode) {\r\n                    activatedNode.change && activatedNode.change();\r\n                }\r\n                this.cdr.detectChanges();\r\n            }\r\n            parent.change && parent.change();\r\n        }\r\n        else if (XIsEmpty(node.pid)) {\r\n            this.treeData.splice(this.treeData.indexOf(node), 1);\r\n            this.nodes.splice(this.nodes.indexOf(node), 1);\r\n            if (this.virtualScroll) {\r\n                this.nodes = [...this.nodes];\r\n            }\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n    updateNode(node, nowNode) {\r\n        Object.assign(node, nowNode);\r\n        node.change && node.change();\r\n    }\r\n    trackByItem(_index, item) {\r\n        return item.id;\r\n    }\r\n}\r\n/** @nocollapse */ XTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.XConfigService }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ XTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.2\", type: XTreeComponent, selector: \"x-tree\", viewQueries: [{ propertyName: \"tree\", first: true, predicate: [\"tree\"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<div #tree class=\\\"x-tree\\\">\\r\\n  <ul *ngIf=\\\"!virtualScroll; else virtualScrollTpl\\\">\\r\\n    <li\\r\\n      x-tree-node\\r\\n      *ngFor=\\\"let node of nodes; trackBy: trackByItem\\\"\\r\\n      [node]=\\\"node\\\"\\r\\n      [lazy]=\\\"lazy\\\"\\r\\n      [lazyData]=\\\"data\\\"\\r\\n      [nodeHeight]=\\\"nodeHeight\\\"\\r\\n      [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n      [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n      [tree]=\\\"this\\\"\\r\\n    ></li>\\r\\n  </ul>\\r\\n</div>\\r\\n\\r\\n<ng-template #virtualScrollTpl>\\r\\n  <cdk-virtual-scroll-viewport\\r\\n    [itemSize]=\\\"itemSize\\\"\\r\\n    [minBufferPx]=\\\"minBufferPx\\\"\\r\\n    [maxBufferPx]=\\\"maxBufferPx\\\"\\r\\n    [style.height.px]=\\\"virtualScrollHeight\\\"\\r\\n  >\\r\\n    <x-tree-node\\r\\n      *cdkVirtualFor=\\\"let node of nodes; templateCacheSize: 0; trackBy: trackByItem\\\"\\r\\n      [node]=\\\"node\\\"\\r\\n      [lazy]=\\\"lazy\\\"\\r\\n      [lazyData]=\\\"data\\\"\\r\\n      [nodeHeight]=\\\"nodeHeight\\\"\\r\\n      [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n      [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n      [tree]=\\\"this\\\"\\r\\n      [virtualScroll]=\\\"virtualScroll\\\"\\r\\n    ></x-tree-node>\\r\\n  </cdk-virtual-scroll-viewport>\\r\\n</ng-template>\\r\\n\\r\\n<!-- \\u63D0\\u524D\\u52A0\\u8F7Dloading\\u7684\\u56FE\\u6807-->\\r\\n<x-icon *ngIf=\\\"lazy\\\" [style.display]=\\\"'none'\\\" type=\\\"fto-loader\\\"></x-icon>\\r\\n\", styles: [\".x-tree{margin:0;padding:0}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i4.XIconComponent, selector: \"x-icon\" }, { kind: \"directive\", type: i4$1.CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: [\"itemSize\", \"minBufferPx\", \"maxBufferPx\"] }, { kind: \"directive\", type: i4$1.CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: [\"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplate\", \"cdkVirtualForTemplateCacheSize\"] }, { kind: \"component\", type: i4$1.CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: [\"orientation\", \"appendOnly\"], outputs: [\"scrolledIndexChange\"] }, { kind: \"component\", type: XTreeNodeComponent, selector: \"x-tree-node, [x-tree-node]\", inputs: [\"parent\", \"tree\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: `${XTreePrefix}`, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div #tree class=\\\"x-tree\\\">\\r\\n  <ul *ngIf=\\\"!virtualScroll; else virtualScrollTpl\\\">\\r\\n    <li\\r\\n      x-tree-node\\r\\n      *ngFor=\\\"let node of nodes; trackBy: trackByItem\\\"\\r\\n      [node]=\\\"node\\\"\\r\\n      [lazy]=\\\"lazy\\\"\\r\\n      [lazyData]=\\\"data\\\"\\r\\n      [nodeHeight]=\\\"nodeHeight\\\"\\r\\n      [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n      [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n      [tree]=\\\"this\\\"\\r\\n    ></li>\\r\\n  </ul>\\r\\n</div>\\r\\n\\r\\n<ng-template #virtualScrollTpl>\\r\\n  <cdk-virtual-scroll-viewport\\r\\n    [itemSize]=\\\"itemSize\\\"\\r\\n    [minBufferPx]=\\\"minBufferPx\\\"\\r\\n    [maxBufferPx]=\\\"maxBufferPx\\\"\\r\\n    [style.height.px]=\\\"virtualScrollHeight\\\"\\r\\n  >\\r\\n    <x-tree-node\\r\\n      *cdkVirtualFor=\\\"let node of nodes; templateCacheSize: 0; trackBy: trackByItem\\\"\\r\\n      [node]=\\\"node\\\"\\r\\n      [lazy]=\\\"lazy\\\"\\r\\n      [lazyData]=\\\"data\\\"\\r\\n      [nodeHeight]=\\\"nodeHeight\\\"\\r\\n      [nodeNowrap]=\\\"nodeNowrap\\\"\\r\\n      [nodeAlignItems]=\\\"nodeAlignItems\\\"\\r\\n      [tree]=\\\"this\\\"\\r\\n      [virtualScroll]=\\\"virtualScroll\\\"\\r\\n    ></x-tree-node>\\r\\n  </cdk-virtual-scroll-viewport>\\r\\n</ng-template>\\r\\n\\r\\n<!-- \\u63D0\\u524D\\u52A0\\u8F7Dloading\\u7684\\u56FE\\u6807-->\\r\\n<x-icon *ngIf=\\\"lazy\\\" [style.display]=\\\"'none'\\\" type=\\\"fto-loader\\\"></x-icon>\\r\\n\", styles: [\".x-tree{margin:0;padding:0}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.XConfigService }]; }, propDecorators: { tree: [{\r\n                type: ViewChild,\r\n                args: ['tree', { static: true }]\r\n            }] } });\n\nclass XTreeModule {\r\n}\r\n/** @nocollapse */ XTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ XTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeModule, declarations: [XTreeComponent, XTreeNodeComponent, XTreeProperty, XTreeNodeProperty], imports: [CommonModule, FormsModule, XIconModule, XCheckboxModule, XOutletModule, XLinkModule, ScrollingModule], exports: [XTreeComponent, XTreeNodeComponent] });\r\n/** @nocollapse */ XTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeModule, imports: [CommonModule, FormsModule, XIconModule, XCheckboxModule, XOutletModule, XLinkModule, ScrollingModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.2\", ngImport: i0, type: XTreeModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [XTreeComponent, XTreeNodeComponent, XTreeProperty, XTreeNodeProperty],\r\n                    exports: [XTreeComponent, XTreeNodeComponent],\r\n                    imports: [CommonModule, FormsModule, XIconModule, XCheckboxModule, XOutletModule, XLinkModule, ScrollingModule]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { XTreeComponent, XTreeModule, XTreeNodeComponent, XTreeNodePrefix, XTreeNodeProperty, XTreePrefix, XTreeProperty };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}